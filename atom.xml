<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pola Bear&#39;s Blog</title>
  
  <subtitle>越美麗越不可觸碰</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-03T07:50:00.166Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>北極熊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>front-end</title>
    <link href="http://yoursite.com/2017/11/03/2017-11-03front-end/"/>
    <id>http://yoursite.com/2017/11/03/2017-11-03front-end/</id>
    <published>2017-11-03T01:31:41.000Z</published>
    <updated>2017-11-03T07:50:00.166Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前端开发知识点：</strong><br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTML&amp;CSS：</div><div class="line">对Web标准的理解、浏览器内核差异、兼容性、hack、CSS基本功：布局、盒子模型、选择器优先级、</div><div class="line">HTML5、CSS3、Flexbox</div><div class="line"></div><div class="line">JavaScript：</div><div class="line">    数据类型、运算、对象、Function、继承、闭包、作用域、原型链、事件、RegExp、JSON、Ajax、</div><div class="line">DOM、BOM、内存泄漏、跨域、异步装载、模板引擎、前端MVC、路由、模块化、Canvas、ECMAScript 6、Nodejs</div><div class="line"></div><div class="line">其他：</div><div class="line">    移动端、响应式、自动化构建、HTTP、离线存储、WEB安全、优化、重构、团队协作、可维护、易用性、SEO、UED、架构、职业生涯、快速学习能力</div></pre></td></tr></table></figure></p><h5 id="1、DOM结构-——-两个节点之间可能存在哪些关系以及如何在节点之间任意移动。"><a href="#1、DOM结构-——-两个节点之间可能存在哪些关系以及如何在节点之间任意移动。" class="headerlink" title="1、DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。"></a>1、DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。</h5><p>​    1.DOM中两个节点存在的关系无非3种：<br>​    1.1.包含与被包含,IE率先引入的contains()方法可检测，例 A.contains(B)，<br>​          即检查节点B是否是节点A的子节点，返回布尔值，现大多数浏览器都支持；<br>​        DOM level 3引入的compareDocumentPosition()，确定节点之间的关系，<br>​          返回值为一个表示关系的位掩码（见图-1）的合(或者是按位或的值，并不知道具体实现)，<br>​          通过按位与操作符“&amp;”可确定关系。例:节点A(例：<html>)在节点B(例：<body>)前–位掩码为4，<br>​          且节点A包含节点B–位掩码为16,则返回值为20，通过”!!(20&amp;16)”这种方式即可返回一个布尔值，<br>​          解析：“20&amp;16”返回16证明节点A包含节点B（即：16），通过!!取得16的布尔值true。<br>​    1.2父与子<br>​        获取父节点：node.parentNode, node.parentElement,两者的区别在于后者只能获取元素，例如：图-2；<br>​        获取子节点：childNodes(以NodeList对象存在的子节点集合),firstChild,lastChild<br>​    1.3同辈（兄弟节点）<br>​        nextSibling，previousSibling<br>​    1.4Element Travel API给DOM添加的属性<br>​        childElementCount,firstElementChild,lastElementChild,nextElementSibling，<br>​        previousElementSibling  ,他们与之前的方法之间的区别是多了Element，保证只返回元素节点，而之前的方法普通的文本节点及注释节点也会返回,之前的方法在非IE浏览器中还会把元素间的空白符当文本节点返回。<br>​    1.5children属性（IE9以后）<br>​        与childNodes不同的地方在于：children只包含元素子节点(IE8及之前的版本可能会包含注释节点)。<br>​<br>​    根据属性移动<br>​    </body></html></p><h5 id="2、DOM操作-——如何添加、移除、移动、复制、创建和查找节点等。"><a href="#2、DOM操作-——如何添加、移除、移动、复制、创建和查找节点等。" class="headerlink" title="2、DOM操作 ——如何添加、移除、移动、复制、创建和查找节点等。"></a>2、DOM操作 ——如何添加、移除、移动、复制、创建和查找节点等。</h5><p>​<br>​    getElementById()    返回带有指定 ID 的元素。<br>​    getElementsByTagName()    返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）。<br>​    getElementsByClassName()    返回包含带有指定类名的所有元素的节点列表。<br>​    appendChild()    把新的子节点添加到指定节点。<br>​    removeChild()    删除子节点。<br>​    replaceChild()    替换子节点。<br>​    insertBefore()    在指定的子节点前面插入新的子节点。<br>​    createAttribute()    创建属性节点。<br>​    createElement()    创建元素节点。<br>​    createTextNode()    创建文本节点。<br>​    getAttribute()    返回指定的属性值。<br>​    setAttribute()    把指定属性设置或修改为指定的值。<br>​    </p><h5 id="3、事件-——-如何使用事件，以及IE和标准DOM事件模型之间存在的差别。"><a href="#3、事件-——-如何使用事件，以及IE和标准DOM事件模型之间存在的差别。" class="headerlink" title="3、事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。"></a>3、事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">2.1.1 HTML事件处理</div><div class="line">指定事件:&lt;button type=&quot;button&quot; onclick=&quot;alert(&apos;响应事件的处javascript代码，可以用全局的函数&apos;)&quot;&gt;Click Me!&lt;/button&gt;  优缺点:简单，但是与HTML代码紧密耦合，更改不方便; </div><div class="line"></div><div class="line">2.2 DOM0级事件处理程序 </div><div class="line">指定事件:document.onclick = function()&#123;alert(&quot;document has been clicked&quot;)&#125;;  </div><div class="line">删除事件:document.onclick = null;  </div><div class="line">优缺点:简单且跨浏览器  </div><div class="line">实质: 为元素指定方法(栗子中为document指定onclick方法)，移除方法，所以其处理程序是在元素的作用域运行的；</div><div class="line"></div><div class="line">2.3 DOM2级事件处理程序  </div><div class="line"> 指定事件:addEventListener(&quot;引号括起来的事件名&quot;， 触发事件后调用的事件处理程序, 是否在捕获节点调用时间处理程序的布尔值)   </div><div class="line"> 删除事件: document.removeEventListener(&quot;click&quot;, funA, false);   </div><div class="line"> 栗子:var funA = function()&#123;alert(&quot; DOM2级事件处理程序&quot;)&#125;;     </div><div class="line"> document.addEventListener(&quot;click&quot;, funA, false);</div><div class="line"> 如果指定的处理程序是匿名函数则不能删除，因为没有函数名;  优缺点: 可以添加多个监听事件。</div><div class="line"></div><div class="line">2.4 IE的事件处理程序(IE11以下，IE11及Edge用的DOM2级事件处理程序) </div><div class="line"> 指定事件: attachEvent(&quot;onclick&quot;, function()&#123;alert(&quot;is no longer supported in ie11&quot;)&#125;);   </div><div class="line"> 删除事件: detachEvent(&quot;onclick&quot;, funA);   </div><div class="line"> 如果指定的处理程序是匿名函数则不能删除，因为没有函数名; </div><div class="line"> 优缺点:可以添加多个监听事件</div></pre></td></tr></table></figure><p>区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">3.1 这里的IE是IE11以下;</div><div class="line">3.2 参数的差别: attachEvent()的第一个参数比addEventListener()的事件名多一个&quot;on&quot;，</div><div class="line">    且没有第三个参数，因为IE事件模型只支持冒泡事件流;</div><div class="line">3.3 事件处理函数作用域的区别: IE中事件处理程序处于全局作用域，其内的this会指向window;</div><div class="line">    而用DOM（0或2）级事件的事件处理程序的作用域是元素作用域，其内的this指向其所属的元素</div><div class="line">    例: document.addEventListener(&quot;click&quot;, function()&#123; </div><div class="line">            if(this == document)&#123;</div><div class="line">              alert(&quot;此时this指向document&quot;);</div><div class="line">            &#125;</div><div class="line">          &#125;, false);</div><div class="line">3.4 事件对象event的属性方法的差别</div><div class="line">        IE                    DOM</div><div class="line">cancelBubble = true    stopPropagation() //停止冒泡</div><div class="line">returnValue = false    preventDefault() //阻止元素默认事件</div><div class="line">srcEelement            target //事件目标</div></pre></td></tr></table></figure><h5 id="4、XMLHttpRequest-——-这是什么、怎样完整地执行一次GET请求、怎样检测错误。"><a href="#4、XMLHttpRequest-——-这是什么、怎样完整地执行一次GET请求、怎样检测错误。" class="headerlink" title="4、XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。"></a>4、XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。</h5><p>XMLHttpRequest 对象提供了在网页加载后与服务器进行通信的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var xmlhttp;</div><div class="line">    function loadXMLDoc(url)&#123;</div><div class="line">        xmlhttp = null;</div><div class="line">        if(window.XMLHttpRequest)&#123;    //code for all new browsers</div><div class="line">            xmlhttp=newXMLHttpRequest();</div><div class="line">        &#125;elseif(window.ActiveXObject)&#123;    //code for IE5 and IE6</div><div class="line">            xmlhttp=newActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</div><div class="line">        &#125;</div><div class="line">        if(xmlhttp!=null)&#123;</div><div class="line">            xmlhttp.onreadystatechange=state_Change;</div><div class="line">               xmlhttp.open(&quot;GET&quot;,url,true);</div><div class="line">            xmlhttp.send(null);</div><div class="line">        &#125;else&#123;</div><div class="line">            alert(&quot;Your browser does not support XMLHTTP.&quot;);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function state_Change()&#123;</div><div class="line">    if(xmlhttp.readyState==4)&#123;    //4 = &quot;loaded&quot;</div><div class="line">        if(xmlhttp.status==200)&#123;    //200 = OK</div><div class="line">            //...our code here...</div><div class="line">        &#125;else&#123;</div><div class="line">            alert(&quot;Problem retrieving XML data&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>​<br>​    </p><h5 id="5、严格模式与混杂模式-——-如何触发这两种模式，区分它们有何意义。"><a href="#5、严格模式与混杂模式-——-如何触发这两种模式，区分它们有何意义。" class="headerlink" title="5、严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。"></a>5、严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">混杂模式是一种比较宽松的向后兼容的模式。混杂模式通常模拟老式浏览器的行为，以防止老站点无法工作。</div><div class="line">而严格模式服务于标准规则</div><div class="line">意义：决定浏览器如何渲染网站（浏览器使用那种规范去解析网页）</div><div class="line">触发：浏览器根据doctype是否存在和使用的是那种dtd来决定。</div></pre></td></tr></table></figure><h5 id="6、盒模型-——-外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型"><a href="#6、盒模型-——-外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型" class="headerlink" title="6、盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型"></a>6、盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">一个元素盒模型的层次从内到外分别为：内边距、边框和外边距</div><div class="line">IE8以下浏览器的盒模型中定义的元素的宽高不包括内边距和边框</div></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=" "></a> </h5><h5 id="7、块级元素与行内元素-——-怎么用CSS控制它们、以及如何合理的使用它们"><a href="#7、块级元素与行内元素-——-怎么用CSS控制它们、以及如何合理的使用它们" class="headerlink" title="7、块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们"></a>7、块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">块级元素，用CSS中的display:inline;属性则变为行内元素行内元素，用CSS中的display:block;属性则变为块级元素影响：周围元素显示在同一行或换行显示，根据具体情况调整样式</div></pre></td></tr></table></figure><h5 id="8、浮动元素-——怎么使用它们、它们有什么问题以及怎么解决这些问题。"><a href="#8、浮动元素-——怎么使用它们、它们有什么问题以及怎么解决这些问题。" class="headerlink" title="8、浮动元素 ——怎么使用它们、它们有什么问题以及怎么解决这些问题。"></a>8、浮动元素 ——怎么使用它们、它们有什么问题以及怎么解决这些问题。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">需要浮动的元素可使用CSS中float属性来定义元素的浮动位置，left：往左浮动，right：往右浮动</div><div class="line">浮动元素引起的问题：</div><div class="line">（1）父元素的高度无法被撑开，影响与父元素同级的元素</div><div class="line">（2）与浮动元素同级的非浮动元素会跟随其后</div><div class="line">（3）若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构</div><div class="line">解决方法：</div><div class="line">使用CSS中的clear:both;属性来清除元素的浮动可解决2、3问题，对于问题1，添加如下样式，给父元素添加clearfix样式：</div><div class="line">.clearfix:after&#123;content: &quot;.&quot;;display: block;height: 0;clear: both;visibility: hidden;&#125;</div><div class="line">.clearfix&#123;display: inline-block;&#125;  /* for IE/Mac */</div></pre></td></tr></table></figure><h5 id="9、HTML与XHTML-——二者有什么区别，你觉得应该使用哪一个并说出理由。"><a href="#9、HTML与XHTML-——二者有什么区别，你觉得应该使用哪一个并说出理由。" class="headerlink" title="9、HTML与XHTML ——二者有什么区别，你觉得应该使用哪一个并说出理由。"></a>9、HTML与XHTML ——二者有什么区别，你觉得应该使用哪一个并说出理由。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">主要区别：</div><div class="line">     XHTML 元素必须被正确地嵌套</div><div class="line">     XHTML 元素必须被关闭，空标签也必须被关闭，如 &lt;br&gt; 必须写成 &lt;br /&gt;</div><div class="line">     XHTML 标签名必须用小写字母</div><div class="line">     XHTML 文档必须拥有根元素</div><div class="line">     XHTML 文档要求给所有属性赋一个值</div><div class="line">     XHTML 要求所有的属性必须用引号&quot;&quot;括起来</div><div class="line">     XHTML 文档需要把所有 &lt; 、&gt;、&amp; 等特殊符号用编码表示</div><div class="line">     XHTML 文档不要在注释内容中使“--”</div><div class="line">     XHTML 图片必须有说明文字</div><div class="line">     XHTML 文档中用id属性代替name属性</div></pre></td></tr></table></figure><h5 id="10、JSON-——-作用、用途、设计结构。"><a href="#10、JSON-——-作用、用途、设计结构。" class="headerlink" title="10、JSON —— 作用、用途、设计结构。"></a>10、JSON —— 作用、用途、设计结构。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。</div><div class="line">JSON建构于两种结构：</div><div class="line">“名称/值”对的集合（A collection of name/value pairs）。不同的语言中，它被理解为对象（object），纪录（record），结构（struct），字典（dictionary），哈希表（hash table），有键列表（keyed list），或者关联数组 （associative array）。 </div><div class="line">值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。</div></pre></td></tr></table></figure><h4 id="题目及答案"><a href="#题目及答案" class="headerlink" title="题目及答案"></a>题目及答案</h4><ul><li><p>Doctype作用？标准模式与兼容模式各有什么区别?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">（1）、&lt;!DOCTYPE&gt;声明位于位于HTML文档中的第一行，处于 &lt;html&gt; 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</div><div class="line"></div><div class="line">（2）、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</div></pre></td></tr></table></figure></li><li><p>HTML5 为什么只需要写 <code>&lt;!DOCTYPE HTML&gt;</code>？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；</div><div class="line"></div><div class="line">而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</div></pre></td></tr></table></figure></li><li><p>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。</div><div class="line"></div><div class="line">（1）行内元素有：a b span img input select strong（强调的语气）</div><div class="line">（2）块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p</div><div class="line"></div><div class="line">（3）常见的空元素：</div><div class="line">&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</div><div class="line">鲜为人知的是：</div><div class="line">&lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;</div><div class="line"></div><div class="line">不同浏览器（版本）、HTML4（5）、CSS2等实际略有差异</div><div class="line">参考: http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements</div></pre></td></tr></table></figure></li><li><p>页面导入样式时，使用link和@import有什么区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</div><div class="line"></div><div class="line">（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</div><div class="line"></div><div class="line">（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;</div></pre></td></tr></table></figure></li><li><p>介绍一下你对浏览器内核的理解？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。</div><div class="line">渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。</div><div class="line"></div><div class="line">JS引擎则：解析和执行javascript来实现网页的动态效果。</div><div class="line"></div><div class="line">最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</div></pre></td></tr></table></figure></li><li><p>常见的浏览器内核有哪些？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]</div><div class="line">  Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等</div><div class="line">  Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]</div><div class="line">  Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]</div><div class="line"></div><div class="line">详细文章：[浏览器内核的解析和对比](http://www.cnblogs.com/fullhouse/archive/2011/12/19/2293455.html)</div></pre></td></tr></table></figure></li><li><p>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</div><div class="line">  绘画 canvas;</div><div class="line">  用于媒介回放的 video 和 audio 元素;</div><div class="line">  本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;</div><div class="line">      sessionStorage 的数据在浏览器关闭后自动删除;</div><div class="line">  语意化更好的内容元素，比如 article、footer、header、nav、section;</div><div class="line">  表单控件，calendar、date、time、email、url、search;</div><div class="line">  新的技术webworker, websocket, Geolocation;</div><div class="line"></div><div class="line">  移除的元素：</div><div class="line">  纯表现的元素：basefont，big，center，font, s，strike，tt，u;</div><div class="line">  对可用性产生负面影响的元素：frame，frameset，noframes；</div><div class="line"></div><div class="line">* 支持HTML5新标签：</div><div class="line"> IE8/IE7/IE6支持通过document.createElement方法产生的标签，</div><div class="line">   可以利用这一特性让这些浏览器支持HTML5新标签，</div><div class="line">   浏览器支持新标签后，还需要添加标签默认的样式。</div><div class="line"></div><div class="line">     当然也可以直接使用成熟的框架、比如html5shim;</div><div class="line"> &lt;!--[if lt IE 9]&gt;</div><div class="line">&lt;script&gt; src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&lt;/script&gt;</div><div class="line"> &lt;![endif]--&gt;</div><div class="line"></div><div class="line">* 如何区分HTML5： DOCTYPE声明\新增的结构元素\功能元素</div></pre></td></tr></table></figure></li><li><p>简述一下你对HTML语义化的理解？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">用正确的标签做正确的事情。</div><div class="line">html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;</div><div class="line">即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;</div><div class="line">搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;</div><div class="line">使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</div></pre></td></tr></table></figure></li><li><p>HTML5的离线储存怎么使用，工作原理能不能解释一下？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。</div><div class="line">原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</div><div class="line"></div><div class="line"></div><div class="line">如何使用：</div><div class="line">1、页面头部像下面一样加入一个manifest的属性；</div><div class="line">2、在cache.manifest文件的编写离线存储的资源；</div><div class="line">CACHE MANIFEST</div><div class="line">#v0.11</div><div class="line">CACHE:</div><div class="line">js/app.js</div><div class="line">css/style.css</div><div class="line">NETWORK:</div><div class="line">resourse/logo.png</div><div class="line">FALLBACK:</div><div class="line">/ /offline.html</div><div class="line">3、在离线状态时，操作window.applicationCache进行需求实现。</div></pre></td></tr></table></figure><p>详细的使用请参考：</p><p><a href="http://yanhaijing.com/html/2014/12/28/html5-manifest/" target="_blank" rel="external">HTML5 离线缓存-manifest简介</a></p><p><a href="http://segmentfault.com/a/1190000000732617" target="_blank" rel="external">有趣的HTML5：离线存储</a></p></li><li><p>浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</div><div class="line">离线的情况下，浏览器就直接使用离线存储的资源。</div></pre></td></tr></table></figure><p>详细请参考：<a href="http://segmentfault.com/a/1190000000732617" target="_blank" rel="external">有趣的HTML5：离线存储</a></p></li><li><p>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。</div><div class="line">cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。</div><div class="line">sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</div><div class="line"></div><div class="line">存储大小：</div><div class="line">cookie数据大小不能超过4k。</div><div class="line">sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</div><div class="line"></div><div class="line">有期时间：</div><div class="line">localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；</div><div class="line">sessionStorage  数据在当前浏览器窗口关闭后自动删除。</div><div class="line">cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</div></pre></td></tr></table></figure></li><li><p>iframe有那些缺点？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">*iframe会阻塞主页面的Onload事件；</div><div class="line">*搜索引擎的检索程序无法解读这种页面，不利于SEO;</div><div class="line"></div><div class="line">*iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</div><div class="line"></div><div class="line">使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript</div><div class="line">动态给iframe添加src属性值，这样可以绕开以上两个问题。</div></pre></td></tr></table></figure></li><li><p>Label的作用是什么？是怎么用的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</div><div class="line"></div><div class="line">&lt;label for=&quot;Name&quot;&gt;Number:&lt;/label&gt;</div><div class="line">&lt;input type=“text“name=&quot;Name&quot; id=&quot;Name&quot;/&gt;</div><div class="line"></div><div class="line">&lt;label&gt;Date:&lt;input type=&quot;text&quot; name=&quot;B&quot;/&gt;&lt;/label&gt;</div></pre></td></tr></table></figure></li><li><p>HTML5的form如何关闭自动完成功能？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">给不想要提示的 form 或某个 input 设置为 autocomplete=off。</div></pre></td></tr></table></figure></li><li><p>如何实现浏览器内多个标签页之间的通信? (阿里)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">WebSocket、SharedWorker；</div><div class="line">也可以调用localstorge、cookies等本地存储方式；</div><div class="line"></div><div class="line">localstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，</div><div class="line">我们通过监听事件，控制它的值来进行页面信息通信；</div><div class="line">注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；</div></pre></td></tr></table></figure></li><li><p>webSocket如何兼容低浏览器？(阿里)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Adobe Flash Socket 、</div><div class="line">ActiveX HTMLFile (IE) 、</div><div class="line">基于 multipart 编码发送 XHR 、</div><div class="line">基于长轮询的 XHR</div></pre></td></tr></table></figure></li><li><p>页面可见性（Page Visibility API） 可以有哪些用途？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;</div><div class="line">在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；</div></pre></td></tr></table></figure></li><li><p>如何在页面上实现一个圆形的可点击区域？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、map+area或者svg</div><div class="line">2、border-radius</div><div class="line">3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</div></pre></td></tr></table></figure></li><li><p>实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></li><li><p>网页验证码是干嘛的，是为了解决什么安全问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；</div><div class="line">有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。</div></pre></td></tr></table></figure></li><li><p>title与h1的区别、b与strong的区别、i与em的区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；</div><div class="line"></div><div class="line">strong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：&lt;strong&gt;会重读，而&lt;B&gt;是展示强调内容。</div><div class="line"></div><div class="line">i内容展示为斜体，em表示强调的文本；</div><div class="line"></div><div class="line">Physical Style Elements -- 自然样式标签</div><div class="line">b, i, u, s, pre</div><div class="line">Semantic Style Elements -- 语义样式标签</div><div class="line">strong, em, ins, del, code</div><div class="line">应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。</div></pre></td></tr></table></figure></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><a href="">CSS</a></h2><ul><li><p>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">（1）有两种， IE 盒子模型、W3C 盒子模型；</div><div class="line">（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；</div><div class="line">（3）区  别： IE的content部分把 border 和 padding计算了进去;</div></pre></td></tr></table></figure></li><li><p>CSS选择符有哪些？哪些属性可以继承？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">*   1.id选择器（ # myid）</div><div class="line">2.类选择器（.myclassname）</div><div class="line">3.标签选择器（div, h1, p）</div><div class="line">4.相邻选择器（h1 + p）</div><div class="line">5.子选择器（ul &gt; li）</div><div class="line">6.后代选择器（li a）</div><div class="line">7.通配符选择器（ * ）</div><div class="line">8.属性选择器（a[rel = &quot;external&quot;]）</div><div class="line">9.伪类选择器（a:hover, li:nth-child）</div><div class="line"></div><div class="line">*   可继承的样式： font-size font-family color, UL LI DL DD DT;</div><div class="line"></div><div class="line">*   不可继承的样式：border padding margin width height ;</div></pre></td></tr></table></figure></li><li><p>CSS优先级算法如何计算？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">*   优先级就近原则，同权重情况下样式定义最近者为准;</div><div class="line">*   载入样式以最后载入的定位为准;</div><div class="line"></div><div class="line">优先级为:</div><div class="line">同权重: 内联样式表（标签内部）&gt; 嵌入样式表（当前文件中）&gt; 外部样式表（外部文件中）。</div><div class="line">!important &gt;  id &gt; class &gt; tag</div><div class="line">important 比 内联优先级高</div></pre></td></tr></table></figure></li><li><p>CSS3新增伪类有那些？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">举例：</div><div class="line">p:first-of-type选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</div><div class="line">p:last-of-type选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</div><div class="line">   p:only-of-type选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</div><div class="line">p:only-child选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。</div><div class="line">p:nth-child(2)选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。</div><div class="line"></div><div class="line">::after在元素之前添加内容,也可以用来做清除浮动。</div><div class="line">::before在元素之后添加内容</div><div class="line">   :enabled  </div><div class="line">:disabled 控制表单控件的禁用状态。</div><div class="line">:checked        单选框或复选框被选中。</div></pre></td></tr></table></figure></li><li><p>如何居中div？</p><ul><li><p>水平居中：给div设置一个宽度，然后添加margin:0 auto属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line">width:200px;</div><div class="line">margin:0 auto;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></li><li><p>让绝对定位的div居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">position: absolute;</div><div class="line">width: 300px;</div><div class="line">height: 300px;</div><div class="line">margin: auto;</div><div class="line">top: 0;</div><div class="line">left: 0;</div><div class="line">bottom: 0;</div><div class="line">right: 0;</div><div class="line">background-color: pink;/* 方便看效果 */</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>水平垂直居中一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">确定容器的宽高 宽500 高 300 的层</div><div class="line">设置层的外边距</div><div class="line"></div><div class="line">div &#123;</div><div class="line">position: relative;/* 相对定位或绝对定位均可 */</div><div class="line">width:500px;</div><div class="line">height:300px;</div><div class="line">top: 50%;</div><div class="line">left: 50%;</div><div class="line">margin: -150px 0 0 -250px;     /* 外边距为自身宽高的一半 */</div><div class="line">background-color: pink; /* 方便看效果 */</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure></li><li><p>水平垂直居中二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">未知容器的宽高，利用 `transform` 属性</div><div class="line"></div><div class="line">div &#123;</div><div class="line">position: absolute;/* 相对定位或绝对定位均可 */</div><div class="line">width:500px;</div><div class="line">height:300px;</div><div class="line">top: 50%;</div><div class="line">left: 50%;</div><div class="line">transform: translate(-50%, -50%);</div><div class="line">background-color: pink; /* 方便看效果 */</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>水平垂直居中三</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">利用 flex 布局</div><div class="line">实际使用时应考虑兼容性</div><div class="line"></div><div class="line">.container &#123;</div><div class="line">display: flex;</div><div class="line">align-items: center; /* 垂直居中 */</div><div class="line">justify-content: center;/* 水平居中 */</div><div class="line"></div><div class="line">&#125;</div><div class="line">.container div &#123;</div><div class="line">width: 100px;</div><div class="line">height: 100px;</div><div class="line">background-color: pink;/* 方便看效果 */</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li><li><p>display有哪些值？说明他们的作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">block       块类型。默认宽度为父元素宽度，可设置宽高，换行显示。</div><div class="line">none        缺省值。象行内元素类型一样显示。</div><div class="line">inline      行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。</div><div class="line">inline-block  默认宽度为内容宽度，可以设置宽高，同行显示。</div><div class="line">list-item   象块类型元素一样显示，并添加样式列表标记。</div><div class="line">table       此元素会作为块级表格来显示。</div><div class="line">inherit     规定应该从父元素继承 display 属性的值。</div></pre></td></tr></table></figure></li><li><p>position的值relative和absolute定位原点是？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> absolute</div><div class="line">生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。</div><div class="line"> fixed （老IE不支持）</div><div class="line">生成绝对定位的元素，相对于浏览器窗口进行定位。</div><div class="line"> relative</div><div class="line">生成相对定位的元素，相对于其正常位置进行定位。</div><div class="line"> static</div><div class="line">默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。</div><div class="line"> inherit</div><div class="line">规定从父元素继承 position 属性的值。</div></pre></td></tr></table></figure></li><li><p>CSS3有哪些新特性？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">新增各种CSS选择器（: not(.input)：所有 class 不是“input”的节点）</div><div class="line">圆角    （border-radius:8px）</div><div class="line">多列布局    （multi-column layout）</div><div class="line">阴影和反射（Shadow\Reflect）</div><div class="line">文字特效（text-shadow、）</div><div class="line">文字渲染（Text-decoration）</div><div class="line">线性渐变（gradient）</div><div class="line">旋转 （transform）</div><div class="line">缩放,定位,倾斜,动画,多背景</div><div class="line">例如:transform:\scale(0.85,0.90)\ translate(0px,-30px)\ skew(-9deg,0deg)\Animation:</div></pre></td></tr></table></figure></li><li><p>请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间。</div><div class="line">较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。</div><div class="line">采用Flex布局的元素，称为Flex容器（flex container），简称&quot;容器&quot;。</div><div class="line">它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称&quot;项目&quot;。</div><div class="line">常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。</div><div class="line">在布局上有了比以前更加灵活的空间。</div><div class="line"></div><div class="line">具体：http://www.w3cplus.com/css3/flexbox-basics.html</div></pre></td></tr></table></figure></li><li><p>用纯CSS创建一个三角形的原理是什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">把上、左、右三条边隐藏掉（颜色设为 transparent）</div><div class="line">#demo &#123;</div><div class="line">  width: 0;</div><div class="line">  height: 0;</div><div class="line">  border-width: 20px;</div><div class="line">  border-style: solid;</div><div class="line">  border-color: transparent transparent red transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>一个满屏 品 字布局 如何设计?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">简单的方式：</div><div class="line">上面的div宽100%，</div><div class="line">下面的两个div分别宽50%，</div><div class="line">然后用float或者inline使其不换行即可</div></pre></td></tr></table></figure></li><li><p>css多列等高如何实现？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">利用padding-bottom|margin-bottom正负值相抵；</div><div class="line">设置父容器设置超出隐藏（overflow:hidden），这样子父容器的高度就还是它里面的列没有设定padding-bottom时的高度，</div><div class="line">当它里面的任 一列高度增加了，则父容器的高度被撑到里面最高那列的高度，</div><div class="line">其他比这列矮的列会用它们的padding-bottom补偿这部分高度差。</div></pre></td></tr></table></figure></li><li><p>经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">* png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.</div><div class="line"></div><div class="line">* 浏览器默认的margin和padding不同。解决方案是加一个全局的*&#123;margin:0;padding:0;&#125;来统一。</div><div class="line"></div><div class="line">* IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。</div><div class="line"></div><div class="line">  浮动ie产生的双倍距离 #box&#123; float:left; width:10px; margin:0 0 0 100px;&#125;</div><div class="line"></div><div class="line">  这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)</div><div class="line"></div><div class="line">  渐进识别的方式，从总体中逐渐排除局部。</div><div class="line"></div><div class="line">  首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。</div><div class="line">  接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。</div><div class="line"></div><div class="line">  css</div><div class="line">      .bb&#123;</div><div class="line">          background-color:red;/*所有识别*/</div><div class="line">      background-color:#00deff\9; /*IE6、7、8识别*/</div><div class="line">      +background-color:#a200ff;/*IE6、7识别*/</div><div class="line">      _background-color:#1e0bd1;/*IE6识别*/</div><div class="line">      &#125;</div><div class="line"></div><div class="line"></div><div class="line">*  IE下,可以使用获取常规属性的方法来获取自定义属性,</div><div class="line">   也可以使用getAttribute()获取自定义属性;</div><div class="line">   Firefox下,只能使用getAttribute()获取自定义属性。</div><div class="line">   解决方法:统一通过getAttribute()获取自定义属性。</div><div class="line"></div><div class="line">*  IE下,even对象有x,y属性,但是没有pageX,pageY属性;</div><div class="line">   Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。</div><div class="line"></div><div class="line">*  解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。</div><div class="line"></div><div class="line">*  Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,</div><div class="line">   可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。</div><div class="line"></div><div class="line">超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:</div><div class="line">L-V-H-A :  a:link &#123;&#125; a:visited &#123;&#125; a:hover &#123;&#125; a:active &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">行框的排列会受到中间空白（回车\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。</div></pre></td></tr></table></figure></li><li><p>为什么要初始化CSS样式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。</div><div class="line"></div><div class="line">- 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。</div><div class="line"></div><div class="line">最简单的初始化方法： * &#123;padding: 0; margin: 0;&#125; （强烈不建议）</div><div class="line"></div><div class="line">淘宝的样式初始化代码：</div><div class="line">body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td &#123; margin:0; padding:0; &#125;</div><div class="line">body, button, input, select, textarea &#123; font:12px/1.5tahoma, arial, \5b8b\4f53; &#125;</div><div class="line">h1, h2, h3, h4, h5, h6&#123; font-size:100%; &#125;</div><div class="line">address, cite, dfn, em, var &#123; font-style:normal; &#125;</div><div class="line">code, kbd, pre, samp &#123; font-family:couriernew, courier, monospace; &#125;</div><div class="line">small&#123; font-size:12px; &#125;</div><div class="line">ul, ol &#123; list-style:none; &#125;</div><div class="line">a &#123; text-decoration:none; &#125;</div><div class="line">a:hover &#123; text-decoration:underline; &#125;</div><div class="line">sup &#123; vertical-align:text-top; &#125;</div><div class="line">sub&#123; vertical-align:text-bottom; &#125;</div><div class="line">legend &#123; color:#000; &#125;</div><div class="line">fieldset, img &#123; border:0; &#125;</div><div class="line">button, input, select, textarea &#123; font-size:100%; &#125;</div><div class="line">table &#123; border-collapse:collapse; border-spacing:0; &#125;</div></pre></td></tr></table></figure></li><li><p>absolute的containing block(容器块)计算方式跟正常流有什么不同？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：</div><div class="line">1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；</div><div class="line">2、否则,则由这个祖先元素的 padding box 构成。</div><div class="line">如果都找不到，则为 initial containing block。</div><div class="line"></div><div class="line">补充：</div><div class="line">1. static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）</div><div class="line">2. absolute: 向上找最近的定位为absolute/relative的元素</div><div class="line">3. fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block</div></pre></td></tr></table></figure></li><li><p>CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？</p><p>对于普通元素visibility:collapse;会将元素完全隐藏,不占据页面布局空间,与display:none;表现相同. 如果目标元素为table,visibility:collapse;将table隐藏,但是会占据页面布局空间. 仅在Firefox下起作用,IE会显示元素,Chrome会将元素隐藏,但是占据空间.</p></li><li><p>position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</p><p>如果元素的display为none,那么元素不被渲染,position,float不起作用,如果元素拥有position:absolute;或者position:fixed;属性那么元素将为绝对定位,float不起作用.如果元素float属性不是none,元素会脱离文档流,根据float属性值来显示.有浮动,绝对定位,inline-block属性的元素,margin不会和垂直方向上的其他元素margin折叠.</p></li><li><p>对BFC规范(块级格式化上下文：block formatting context)的理解？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">（W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用。）</div><div class="line"> 一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。</div><div class="line"> 不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。</div></pre></td></tr></table></figure></li><li><p>css定义的权重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：</div><div class="line"></div><div class="line">/*权重为1*/</div><div class="line">div&#123;</div><div class="line">&#125;</div><div class="line">/*权重为10*/</div><div class="line">.class1&#123;</div><div class="line">&#125;</div><div class="line">/*权重为100*/</div><div class="line">#id1&#123;</div><div class="line">&#125;</div><div class="line">/*权重为100+1=101*/</div><div class="line">#id1 div&#123;</div><div class="line">&#125;</div><div class="line">/*权重为10+1=11*/</div><div class="line">.class1 div&#123;</div><div class="line">&#125;</div><div class="line">/*权重为10+10+1=21*/</div><div class="line">.class1 .class2 div&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现</div></pre></td></tr></table></figure></li><li><p>请解释一下为什么需要清除浮动？清除浮动的方式</p><p>清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">1、父级div定义height；</div><div class="line">2、父级div 也一起浮动；</div><div class="line">3、常规的使用一个class；</div><div class="line">.clearfix::before, .clearfix::after &#123;</div><div class="line">    content: &quot; &quot;;</div><div class="line">    display: table;</div><div class="line">&#125;</div><div class="line">.clearfix::after &#123;</div><div class="line">    clear: both;</div><div class="line">&#125;</div><div class="line">.clearfix &#123;</div><div class="line">    *zoom: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">4、SASS编译的时候，浮动元素的父级div定义伪类:after</div><div class="line">&amp;::after,&amp;::before&#123;</div><div class="line">    content: &quot; &quot;;</div><div class="line">        visibility: hidden;</div><div class="line">        display: block;</div><div class="line">        height: 0;</div><div class="line">        clear: both;</div><div class="line">&#125;</div><div class="line"></div><div class="line">解析原理：</div><div class="line">1) display:block 使生成的元素以块级元素显示,占满剩余空间;</div><div class="line">2) height:0 避免生成内容破坏原有布局的高度。</div><div class="line">3) visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;</div><div class="line">4）通过 content:&quot;.&quot;生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 content:&quot;.&quot;,有些版本可能content 里面内容为空,一丝冰凉是不推荐这样做的,firefox直到7.0 content:”&quot; 仍然会产生额外的空隙；</div><div class="line">5）zoom：1 触发IE hasLayout。</div><div class="line"></div><div class="line">通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版本的闭合浮动为什么会有font-size：0，line-height：0。</div></pre></td></tr></table></figure></li><li><p>什么是外边距合并？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。</div><div class="line">合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</div><div class="line">w3school介绍网址： http://www.w3school.com.cn/css/css_margin_collapsing.asp</div></pre></td></tr></table></figure></li><li><p>zoom:1的清除浮动原理?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">清除浮动，触发hasLayout；</div><div class="line">Zoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。</div><div class="line">譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等。</div><div class="line"></div><div class="line">来龙去脉大概如下：</div><div class="line">当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。</div><div class="line"></div><div class="line">Zoom属是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标准化，出现在 CSS 3.0 规范草案中。</div><div class="line"></div><div class="line">目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？</div><div class="line">可以通过css3里面的动画属性scale进行缩放。</div></pre></td></tr></table></figure></li><li><p>移动端的布局用过媒体查询吗？</p><p>假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来， 而显示设备、屏幕投影和打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法</p><p>当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。 当媒体查询返回假， 标签上带有媒体查询的样式表 仍将被下载 （只不过不会被应用）。</p><p>包含了一个媒体类型和至少一个使用 宽度、高度和颜色等媒体属性来限制样式表范围的表达式。 CSS3加入的媒体查询使得无需修改内容便可以使样式应用于某些特定的设备范围。</p><style> @media (min-width: 700px) and (orientation: landscape){ .sidebar { display: none; } } </style></li><li><p>使用 CSS 预处理器吗？喜欢那个？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)</div></pre></td></tr></table></figure></li><li><p>CSS优化、提高性能的方法有哪些？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）；</div><div class="line">如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）；</div><div class="line">提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;</div><div class="line">使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）；</div></pre></td></tr></table></figure></li><li><p>浏览器是怎样解析CSS选择器的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素。</div><div class="line">只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则。</div></pre></td></tr></table></figure></li><li><p>在网页中的应该使用奇数还是偶数的字体？为什么呢？</p></li><li><p>margin和padding分别适合什么场景使用？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。</div><div class="line">margin用于布局分开元素使元素与元素互不相干；</div><div class="line">padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段</div></pre></td></tr></table></figure></li><li><p>抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]</p></li><li><p>元素竖向的百分比设定是相对于容器的高度吗？</p></li><li><p>全屏滚动的原理是什么？用到了CSS的那些属性？</p></li><li><p>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</p></li><li><p>视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</p></li><li><p>::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）</div><div class="line">双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，</div><div class="line">比如:first-line、:first-letter、:before、:after等，</div><div class="line">而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。</div><div class="line"></div><div class="line">想让插入的内容出现在其它内容前，使用::before，否者，使用::after；</div><div class="line">在代码顺序上，::after生成的内容也比::before生成的内容靠后。</div><div class="line">如果按堆栈视角，::after生成的内容会在::before生成的内容之上</div></pre></td></tr></table></figure></li><li><p>如何修改chrome记住密码后自动填充表单的黄色背景 ？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill &#123;</div><div class="line">  background-color: rgb(250, 255, 189); /* #FAFFBD; */</div><div class="line">  background-image: none;</div><div class="line">  color: rgb(0, 0, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>你对line-height是如何理解的？</p></li><li><p>设置元素浮动后，该元素的display值是多少？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">自动变成了 display:block</div></pre></td></tr></table></figure></li><li><p>怎么让Chrome支持小于12px 的文字？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1、用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。</div><div class="line">2、使用12px及12px以上字体大小：为了兼容各大主流浏览器，建议设计美工图时候设置大于或等于12px的字体大小，如果是接单的这个时候就需要给客户讲解小于12px浏览器不兼容等事宜。</div><div class="line">3、继续使用小于12px字体大小样式设置：如果不考虑chrome可以不用考虑兼容，同时在设置小于12px对象设置-webkit-text-size-adjust:none，做到最大兼容考虑。</div><div class="line">4、使用12px以上字体：为了兼容、为了代码更简单 从新考虑权重下兼容性。</div></pre></td></tr></table></figure></li><li><p>让页面里的字体变清晰，变细用CSS怎么做？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-font-smoothing: antialiased;</div></pre></td></tr></table></figure></li><li><p>font-style属性可以让它赋值为“oblique” oblique是什么意思？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">倾斜的字体样式</div></pre></td></tr></table></figure></li><li><p>position:fixed;在android下无效怎么处理？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fixed的元素是相对整个页面固定位置的，你在屏幕上滑动只是在移动这个所谓的viewport，</div><div class="line">原来的网页还好好的在那，fixed的内容也没有变过位置，</div><div class="line">所以说并不是iOS不支持fixed，只是fixed的元素不是相对手机屏幕固定的。</div><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot;/&gt;</div></pre></td></tr></table></figure></li><li><p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</div></pre></td></tr></table></figure></li><li><p>display:inline-block 什么时候会显示间隙？(携程)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing</div></pre></td></tr></table></figure></li><li><p>overflow: scroll时不能平滑滚动的问题怎么处理？</p></li><li><p>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。</p></li><li><p>png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</p></li><li><p>什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，</div><div class="line">所以不如隔离开。</div><div class="line"></div><div class="line">因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，</div><div class="line">这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。</div><div class="line"></div><div class="line">同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，</div><div class="line">提高了webserver的http请求的解析速度。</div></pre></td></tr></table></figure></li><li><p>style标签写在body后与body前有什么区别？</p></li><li><p>什么是CSS 预处理器 / 后处理器？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，</div><div class="line">  还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。</div><div class="line"></div><div class="line">- 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的</div><div class="line">  是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</div></pre></td></tr></table></figure></li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a><a href="">JavaScript</a></h2><ul><li><p>介绍js的基本数据类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Undefined、Null、Boolean、Number、String、</div><div class="line">ECMAScript 2015 新增:Symbol(创建后独一无二且不可变的数据类型 )</div></pre></td></tr></table></figure></li><li><p>介绍js有哪些内置对象？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Object 是 JavaScript 中所有对象的父对象</div><div class="line"></div><div class="line">数据封装类对象：Object、Array、Boolean、Number 和 String</div><div class="line">其他对象：Function、Arguments、Math、Date、RegExp、Error</div><div class="line"></div><div class="line">参考：http://www.ibm.com/developerworks/cn/web/wa-objectsinjs-v1b/index.html</div></pre></td></tr></table></figure></li><li><p>说几条写JavaScript的基本规范？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1.不要在同一行声明多个变量。</div><div class="line">2.请使用 ===/!==来比较true/false或者数值</div><div class="line">3.使用对象字面量替代new Array这种形式</div><div class="line">4.不要使用全局函数。</div><div class="line">5.Switch语句必须带有default分支</div><div class="line">6.函数不应该有时候有返回值，有时候没有返回值。</div><div class="line">7.For循环必须使用大括号</div><div class="line">8.If语句必须使用大括号</div><div class="line">9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。</div></pre></td></tr></table></figure></li><li><p>JavaScript原型，原型链 ? 有什么特点？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，</div><div class="line">如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，</div><div class="line">于是就这样一直找下去，也就是我们平时所说的原型链的概念。</div><div class="line">关系：instance.constructor.prototype = instance.__proto__</div><div class="line"></div><div class="line">特点：</div><div class="line">JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</div><div class="line"></div><div class="line"></div><div class="line"> 当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，</div><div class="line"> 就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。</div><div class="line">function Func()&#123;&#125;</div><div class="line">Func.prototype.name = &quot;Sean&quot;;</div><div class="line">Func.prototype.getInfo = function() &#123;</div><div class="line">  return this.name;</div><div class="line">&#125;</div><div class="line">var person = new Func();//现在可以参考var person = Object.create(oldObject);</div><div class="line">console.log(person.getInfo());//它拥有了Func的属性和方法</div><div class="line">//&quot;Sean&quot;</div><div class="line">console.log(Func.prototype);</div><div class="line">// Func &#123; name=&quot;Sean&quot;, getInfo=function()&#125;</div></pre></td></tr></table></figure></li><li><p>JavaScript有几种类型的值？，你能画一下他们的内存图吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">栈：原始数据类型（Undefined，Null，Boolean，Number、String）</div><div class="line">堆：引用数据类型（对象、数组和函数）</div><div class="line"></div><div class="line">两种类型的区别是：存储位置不同；</div><div class="line">原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</div><div class="line">引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体</div></pre></td></tr></table></figure><p><a href="https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966" target="_blank" rel="external"><img src="https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966" alt="Stated Clearly Image"></a></p></li><li><p>如何将字符串转化为数字，例如’12.3b’?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* parseFloat(&apos;12.3b&apos;);</div><div class="line">* 正则表达式，&apos;12.3b&apos;.match(/(\d)+(\.)?(\d)+/g)[0] * 1, 但是这个不太靠谱，提供一种思路而已。</div></pre></td></tr></table></figure></li><li><p>如何将浮点数点左边的数每三位添加一个逗号，如12000000.11转化为『12,000,000.11』?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function commafy(num)&#123;</div><div class="line">return num &amp;&amp; num</div><div class="line">.toString()</div><div class="line">.replace(/(\d)(?=(\d&#123;3&#125;)+\.)/g, function($1, $2)&#123;</div><div class="line">return $2 + &apos;,&apos;;</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>如何实现数组的随机排序？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">方法一：</div><div class="line">var arr = [1,2,3,4,5,6,7,8,9,10];</div><div class="line">function randSort1(arr)&#123;</div><div class="line">for(var i = 0,len = arr.length;i &lt; len; i++ )&#123;</div><div class="line">var rand = parseInt(Math.random()*len);</div><div class="line">var temp = arr[rand];</div><div class="line">arr[rand] = arr[i];</div><div class="line">arr[i] = temp;</div><div class="line">&#125;</div><div class="line">return arr;</div><div class="line">&#125;</div><div class="line">console.log(randSort1(arr));</div><div class="line"></div><div class="line">方法二：</div><div class="line">var arr = [1,2,3,4,5,6,7,8,9,10];</div><div class="line">function randSort2(arr)&#123;</div><div class="line">var mixedArray = [];</div><div class="line">while(arr.length &gt; 0)&#123;</div><div class="line">var randomIndex = parseInt(Math.random()*arr.length);</div><div class="line">mixedArray.push(arr[randomIndex]);</div><div class="line">arr.splice(randomIndex, 1);</div><div class="line">&#125;</div><div class="line">return mixedArray;</div><div class="line">&#125;</div><div class="line">console.log(randSort2(arr));</div><div class="line"></div><div class="line">方法三：</div><div class="line">var arr = [1,2,3,4,5,6,7,8,9,10];</div><div class="line">arr.sort(function()&#123;</div><div class="line">return Math.random() - 0.5;</div><div class="line">&#125;)</div><div class="line">console.log(arr);</div></pre></td></tr></table></figure></li><li><p>Javascript如何实现继承？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">1、构造继承</div><div class="line">2、原型继承</div><div class="line">3、实例继承</div><div class="line">4、拷贝继承</div><div class="line"></div><div class="line">原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。</div><div class="line"></div><div class="line">function Parent()&#123;</div><div class="line">this.name = &apos;wang&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Child()&#123;</div><div class="line">this.age = 28;</div><div class="line">&#125;</div><div class="line">Child.prototype = new Parent();//继承了Parent，通过原型</div><div class="line"></div><div class="line">var demo = new Child();</div><div class="line">alert(demo.age);</div><div class="line">alert(demo.name);//得到被继承的属性</div></pre></td></tr></table></figure></li><li><p>JavaScript继承的几种实现方式？</p><ul><li>参考：<a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="external">构造函数的继承</a>，<a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html" target="_blank" rel="external">非构造函数的继承</a>；</li></ul></li><li><p>javascript创建对象的几种方式？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。</div><div class="line"></div><div class="line"></div><div class="line">1、对象字面量的方式</div><div class="line"></div><div class="line">person=&#123;firstname:&quot;Mark&quot;,lastname:&quot;Yun&quot;,age:25,eyecolor:&quot;black&quot;&#125;;</div><div class="line"></div><div class="line">2、用function来模拟无参的构造函数</div><div class="line"></div><div class="line">function Person()&#123;&#125;</div><div class="line">var person=new Person();//定义一个function，如果使用new&quot;实例化&quot;,该function可以看作是一个Class</div><div class="line">person.name=&quot;Mark&quot;;</div><div class="line">person.age=&quot;25&quot;;</div><div class="line">person.work=function()&#123;</div><div class="line">alert(person.name+&quot; hello...&quot;);</div><div class="line">&#125;</div><div class="line">person.work();</div><div class="line"></div><div class="line">3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）</div><div class="line"></div><div class="line">function Pet(name,age,hobby)&#123;</div><div class="line">   this.name=name;//this作用域：当前对象</div><div class="line">   this.age=age;</div><div class="line">   this.hobby=hobby;</div><div class="line">   this.eat=function()&#123;</div><div class="line">      alert(&quot;我叫&quot;+this.name+&quot;,我喜欢&quot;+this.hobby+&quot;,是个程序员&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">var maidou =new Pet(&quot;麦兜&quot;,25,&quot;coding&quot;);//实例化、创建对象</div><div class="line">maidou.eat();//调用eat方法</div><div class="line"></div><div class="line"></div><div class="line">4、用工厂方式来创建（内置对象）</div><div class="line"></div><div class="line"> var wcDog =new Object();</div><div class="line"> wcDog.name=&quot;旺财&quot;;</div><div class="line"> wcDog.age=3;</div><div class="line"> wcDog.work=function()&#123;</div><div class="line">   alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);</div><div class="line"> &#125;</div><div class="line"> wcDog.work();</div><div class="line"></div><div class="line"></div><div class="line">5、用原型方式来创建</div><div class="line"></div><div class="line">function Dog()&#123;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"> Dog.prototype.name=&quot;旺财&quot;;</div><div class="line"> Dog.prototype.eat=function()&#123;</div><div class="line"> alert(this.name+&quot;是个吃货&quot;);</div><div class="line"> &#125;</div><div class="line"> var wangcai =new Dog();</div><div class="line"> wangcai.eat();</div><div class="line"></div><div class="line"></div><div class="line">5、用混合方式来创建</div><div class="line"></div><div class="line">function Car(name,price)&#123;</div><div class="line">  this.name=name;</div><div class="line">  this.price=price;</div><div class="line">&#125;</div><div class="line"> Car.prototype.sell=function()&#123;</div><div class="line">   alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);</div><div class="line">  &#125;</div><div class="line">var camry =new Car(&quot;凯美瑞&quot;,27);</div><div class="line">camry.sell();</div></pre></td></tr></table></figure></li><li><p>Javascript作用链域?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。</div><div class="line">当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，</div><div class="line">直至全局函数，这种组织形式就是作用域链。</div></pre></td></tr></table></figure></li><li><p>谈谈This对象的理解。</p></li><li><p>this总是指向函数的直接调用者（而非间接调用者）；</p></li><li><p>如果有new关键字，this指向new出来的那个对象；</p></li><li><p>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；</p></li><li><p>eval是做什么的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">它的功能是把对应的字符串解析成JS代码并运行；</div><div class="line">应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。</div><div class="line">由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(&apos;(&apos;+ str +&apos;)&apos;);</div></pre></td></tr></table></figure></li><li><p>什么是window对象? 什么是document对象?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window对象是指浏览器打开的窗口。</div><div class="line">document对象是Documentd对象（HTML 文档对象）的一个只读引用，window对象的一个属性。</div></pre></td></tr></table></figure></li><li><p>null，undefined 的区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">null 表示一个对象是“没有值”的值，也就是值为“空”；</div><div class="line">undefined 表示一个变量声明了没有初始化(赋值)；</div><div class="line"></div><div class="line">undefined不是一个有效的JSON，而null是；</div><div class="line">undefined的类型(typeof)是undefined；</div><div class="line">null的类型(typeof)是object；</div><div class="line"></div><div class="line"></div><div class="line">Javascript将未赋值的变量默认值设为undefined；</div><div class="line">Javascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的。</div><div class="line"></div><div class="line">typeof undefined</div><div class="line">//&quot;undefined&quot;</div><div class="line">undefined :是一个表示&quot;无&quot;的原始值或者说表示&quot;缺少值&quot;，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined；</div><div class="line">例如变量被声明了，但没有赋值时，就等于undefined</div><div class="line"></div><div class="line">typeof null</div><div class="line">//&quot;object&quot;</div><div class="line">null : 是一个对象(空对象, 没有任何属性和方法)；</div><div class="line">例如作为函数的参数，表示该函数的参数不是对象；</div><div class="line"></div><div class="line">注意：</div><div class="line">在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined</div><div class="line">null == undefined // true</div><div class="line">null === undefined // false</div><div class="line"></div><div class="line">再来一个例子：</div><div class="line"></div><div class="line">null</div><div class="line">Q：有张三这个人么？</div><div class="line">A：有！</div><div class="line">Q：张三有房子么？</div><div class="line">A：没有！</div><div class="line"></div><div class="line">undefined</div><div class="line">Q：有张三这个人么？</div><div class="line">A：有！</div><div class="line">Q: 张三有多少岁？</div><div class="line">A: 不知道（没有被告诉）</div></pre></td></tr></table></figure><p>参考阅读：<a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="external">undefined与null的区别</a></p></li><li><p>写一个通用的事件侦听器函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">// event(事件)工具集，来源：github.com/markyun</div><div class="line">markyun.Event = &#123;</div><div class="line">// 页面加载完成后</div><div class="line">readyEvent : function(fn) &#123;</div><div class="line">if (fn==null) &#123;</div><div class="line">fn=document;</div><div class="line">&#125;</div><div class="line">var oldonload = window.onload;</div><div class="line">if (typeof window.onload != &apos;function&apos;) &#123;</div><div class="line">window.onload = fn;</div><div class="line">&#125; else &#123;</div><div class="line">window.onload = function() &#123;</div><div class="line">oldonload();</div><div class="line">fn();</div><div class="line">&#125;;</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</div><div class="line">// 参数： 操作的元素,事件名称 ,事件处理程序</div><div class="line">addEvent : function(element, type, handler) &#123;</div><div class="line">if (element.addEventListener) &#123;</div><div class="line">//事件类型、需要执行的函数、是否捕捉</div><div class="line">element.addEventListener(type, handler, false);</div><div class="line">&#125; else if (element.attachEvent) &#123;</div><div class="line">element.attachEvent(&apos;on&apos; + type, function() &#123;</div><div class="line">handler.call(element);</div><div class="line">&#125;);</div><div class="line">&#125; else &#123;</div><div class="line">element[&apos;on&apos; + type] = handler;</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">// 移除事件</div><div class="line">removeEvent : function(element, type, handler) &#123;</div><div class="line">if (element.removeEventListener) &#123;</div><div class="line">element.removeEventListener(type, handler, false);</div><div class="line">&#125; else if (element.datachEvent) &#123;</div><div class="line">element.detachEvent(&apos;on&apos; + type, handler);</div><div class="line">&#125; else &#123;</div><div class="line">element[&apos;on&apos; + type] = null;</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</div><div class="line">stopPropagation : function(ev) &#123;</div><div class="line">if (ev.stopPropagation) &#123;</div><div class="line">ev.stopPropagation();</div><div class="line">&#125; else &#123;</div><div class="line">ev.cancelBubble = true;</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">// 取消事件的默认行为</div><div class="line">preventDefault : function(event) &#123;</div><div class="line">if (event.preventDefault) &#123;</div><div class="line">event.preventDefault();</div><div class="line">&#125; else &#123;</div><div class="line">event.returnValue = false;</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">// 获取事件目标</div><div class="line">getTarget : function(event) &#123;</div><div class="line">return event.target || event.srcElement;</div><div class="line">&#125;,</div><div class="line">// 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</div><div class="line">getEvent : function(e) &#123;</div><div class="line">var ev = e || window.event;</div><div class="line">if (!ev) &#123;</div><div class="line">var c = this.getEvent.caller;</div><div class="line">while (c) &#123;</div><div class="line">ev = c.arguments[0];</div><div class="line">if (ev &amp;&amp; Event == ev.constructor) &#123;</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">c = c.caller;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return ev;</div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>[“1”, “2”, “3”].map(parseInt) 答案是多少？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">parseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，</div><div class="line">其中 radix 表示要解析的数字的基数。【该值介于 2 ~ 36 之间，并且字符串中的数字不能大于radix才能正确返回数字结果值】;</div><div class="line">但此处 map 传了 3 个 (element, index, array),我们重写parseInt函数测试一下是否符合上面的规则。</div><div class="line"></div><div class="line">function parseInt(str, radix) &#123;</div><div class="line">    return str+&apos;-&apos;+radix;</div><div class="line">&#125;;</div><div class="line">var a=[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;];</div><div class="line">a.map(parseInt);  // [&quot;1-0&quot;, &quot;2-1&quot;, &quot;3-2&quot;] 不能大于radix</div><div class="line"></div><div class="line">因为二进制里面，没有数字3,导致出现超范围的radix赋值和不合法的进制解析，才会返回NaN</div><div class="line">所以[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 答案也就是：[1, NaN, NaN]</div><div class="line"></div><div class="line">详细解析：http://blog.csdn.net/justjavac/article/details/19473199</div></pre></td></tr></table></figure></li><li><p>事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。</div><div class="line">2. 事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；</div><div class="line">3. ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）</div></pre></td></tr></table></figure></li><li><p>什么是闭包（closure），为什么要用它？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。</div><div class="line"></div><div class="line">闭包的特性：</div><div class="line"></div><div class="line">1.函数内再嵌套函数</div><div class="line">2.内部函数可以引用外层的参数和变量</div><div class="line">3.参数和变量不会被垃圾回收机制回收</div><div class="line"></div><div class="line">//li节点的onclick事件都能正确的弹出当前被点击的li索引</div><div class="line"> &lt;ul id=&quot;testUL&quot;&gt;</div><div class="line">    &lt;li&gt; index = 0&lt;/li&gt;</div><div class="line">    &lt;li&gt; index = 1&lt;/li&gt;</div><div class="line">    &lt;li&gt; index = 2&lt;/li&gt;</div><div class="line">    &lt;li&gt; index = 3&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  var nodes = document.getElementsByTagName(&quot;li&quot;);</div><div class="line">for(i = 0;i&lt;nodes.length;i+= 1)&#123;</div><div class="line">    nodes[i].onclick = (function(i)&#123;</div><div class="line">              return function() &#123;</div><div class="line">                 console.log(i);</div><div class="line">              &#125; //不用闭包的话，值每次都是4</div><div class="line">            &#125;)(i);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在</div><div class="line">使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源</div><div class="line">因为say667()的内部函数的执行需要依赖say667()中的变量</div><div class="line">这是对闭包作用的非常直白的描述</div><div class="line"></div><div class="line">  function say667() &#123;</div><div class="line">// Local variable that ends up within closure</div><div class="line">var num = 666;</div><div class="line">var sayAlert = function() &#123;</div><div class="line">alert(num);</div><div class="line">&#125;</div><div class="line">num++;</div><div class="line">return sayAlert;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> var sayAlert = say667();</div><div class="line"> sayAlert()//执行结果应该弹出的667</div></pre></td></tr></table></figure></li><li><p>javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,</div><div class="line"></div><div class="line">使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。</div><div class="line">默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;</div><div class="line">全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；</div><div class="line">消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和非严格模式的也不相同;</div><div class="line"></div><div class="line">提高编译器效率，增加运行速度；</div><div class="line">为未来新版本的Javascript标准化做铺垫。</div></pre></td></tr></table></figure></li><li><p>如何判断一个对象是否属于某个类？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">使用instanceof （待完善）</div><div class="line"> if(a instanceof Person)&#123;</div><div class="line">     alert(&apos;yes&apos;);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></li><li><p>new操作符具体干了什么呢?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> 1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</div><div class="line">   2、属性和方法被加入到 this 引用的对象中。</div><div class="line"> 3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。</div><div class="line"></div><div class="line">var obj  = &#123;&#125;;</div><div class="line">obj.__proto__ = Base.prototype;</div><div class="line">Base.call(obj);</div></pre></td></tr></table></figure></li><li><p>用原生JavaScript的实现过什么功能吗？</p></li><li><p>Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">hasOwnProperty</div><div class="line"></div><div class="line">javaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。</div><div class="line">使用方法：</div><div class="line">object.hasOwnProperty(proName)</div><div class="line">其中参数object是必选项。一个对象的实例。</div><div class="line">proName是必选项。一个属性名称的字符串值。</div><div class="line"></div><div class="line">如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。</div></pre></td></tr></table></figure></li><li><p>JSON 的了解？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。</div><div class="line">它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小</div><div class="line">如：&#123;&quot;age&quot;:&quot;12&quot;, &quot;name&quot;:&quot;back&quot;&#125;</div><div class="line"></div><div class="line">JSON字符串转换为JSON对象:</div><div class="line">var obj =eval(&apos;(&apos;+ str +&apos;)&apos;);</div><div class="line">var obj = str.parseJSON();</div><div class="line">var obj = JSON.parse(str);</div><div class="line"></div><div class="line">JSON对象转换为JSON字符串：</div><div class="line">var last=obj.toJSONString();</div><div class="line">var last=JSON.stringify(obj);</div></pre></td></tr></table></figure></li><li><p><code>[].forEach.call($$(&quot;*&quot;),function(a){a.style.outline=&quot;1px solid #&quot;+(~~(Math.random()*(1&lt;&lt;24))).toString(16)})</code> 能解释一下这段代码的意思吗？</p></li><li><p>js延迟加载的方式有哪些？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defer和async、动态创建DOM方式（用得最多）、按需异步载入js</div></pre></td></tr></table></figure></li><li><p>Ajax 是什么? 如何创建一个Ajax？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ajax的全称：Asynchronous Javascript And XML。</div><div class="line">异步传输+js+xml。</div><div class="line">所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。</div><div class="line"></div><div class="line">(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象</div><div class="line">(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息</div><div class="line">(3)设置响应HTTP请求状态变化的函数</div><div class="line">(4)发送HTTP请求</div><div class="line">(5)获取异步调用返回的数据</div><div class="line">(6)使用JavaScript和DOM实现局部刷新</div></pre></td></tr></table></figure></li><li><p>Ajax 解决浏览器缓存问题？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1、在ajax发送请求前加上 anyAjaxObj.setRequestHeader(&quot;If-Modified-Since&quot;,&quot;0&quot;)。</div><div class="line"></div><div class="line">2、在ajax发送请求前加上 anyAjaxObj.setRequestHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;)。</div><div class="line"></div><div class="line">3、在URL后面加上一个随机数： &quot;fresh=&quot; + Math.random();。</div></pre></td></tr></table></figure></li></ul><p>​       4、在URL后面加上时间戳：”nowtime=” + new Date().getTime();。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">5、如果是使用jQuery，直接这样就可以了 $.ajaxSetup(&#123;cache:false&#125;)。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录。</div></pre></td></tr></table></figure><ul><li><p>同步和异步的区别?</p><p>同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.</p><p>同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。</p><p>异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。</p><p>（待完善）</p></li><li><p>如何解决跨域问题?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面</div></pre></td></tr></table></figure></li><li><p>页面编码和被请求的资源编码如果不一致如何处理？</p></li><li><p>模块化开发怎么做？</p><p><a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank" rel="external">立即执行函数</a>,不暴露私有成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var module1 = (function()&#123;</div><div class="line">　　　　var _count = 0;</div><div class="line">　　　　var m1 = function()&#123;</div><div class="line">　　　　　　//...</div><div class="line">　　　　&#125;;</div><div class="line">　　　　var m2 = function()&#123;</div><div class="line">　　　　　　//...</div><div class="line">　　　　&#125;;</div><div class="line">　　　　return &#123;</div><div class="line">　　　　　　m1 : m1,</div><div class="line">　　　　　　m2 : m2</div><div class="line">　　　　&#125;;</div><div class="line">　　&#125;)();</div></pre></td></tr></table></figure><p>（待完善）</p></li><li><p>AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？</p><blockquote><p>AMD 规范在这里：<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">https://github.com/amdjs/amdjs-api/wiki/AMD</a></p><p>CMD 规范在这里：<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">https://github.com/seajs/seajs/issues/242</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Asynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所有依赖某些模块的语句均放置在回调函数中。</div><div class="line"></div><div class="line"> 区别：</div><div class="line"></div><div class="line">    1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.</div><div class="line">    2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：</div><div class="line"></div><div class="line">// CMD</div><div class="line">define(function(require, exports, module) &#123;</div><div class="line">    var a = require(&apos;./a&apos;)</div><div class="line">    a.doSomething()</div><div class="line">    // 此处略去 100 行</div><div class="line">    var b = require(&apos;./b&apos;) // 依赖可以就近书写</div><div class="line">    b.doSomething()</div><div class="line">    // ...</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// AMD 默认推荐</div><div class="line">define([&apos;./a&apos;, &apos;./b&apos;], function(a, b) &#123; // 依赖必须一开始就写好</div><div class="line">    a.doSomething()</div><div class="line">    // 此处略去 100 行</div><div class="line">    b.doSomething()</div><div class="line">    // ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p>requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">参考：http://annn.me/how-to-realize-cmd-loader/</div></pre></td></tr></table></figure></li><li><p>JS模块加载器的轮子怎么造，也就是如何实现一个模块加载器？</p></li><li><p>谈一谈你对ECMAScript6的了解？</p></li><li><p>ECMAScript6 怎么写class么，为什么会出现class这种东西?</p></li><li><p>异步加载JS的方式有哪些？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(1) defer，只支持IE</div><div class="line"></div><div class="line">(2) async：</div><div class="line"></div><div class="line">(3) 创建script，插入到DOM中，加载完毕后callBack</div></pre></td></tr></table></figure></li><li><p>documen.write和 innerHTML的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">document.write只能重绘整个页面</div><div class="line"></div><div class="line">innerHTML可以重绘页面的一部分</div></pre></td></tr></table></figure></li><li><p>DOM操作——怎样添加、移除、移动、复制、创建和查找节点?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">（1）创建新节点</div><div class="line">  createDocumentFragment()    //创建一个DOM片段</div><div class="line">  createElement()   //创建一个具体的元素</div><div class="line">  createTextNode()   //创建一个文本节点</div><div class="line">（2）添加、移除、替换、插入</div><div class="line">  appendChild()</div><div class="line">  removeChild()</div><div class="line">  replaceChild()</div><div class="line">  insertBefore() //在已有的子节点前插入一个新的子节点</div><div class="line">（3）查找</div><div class="line">  getElementsByTagName()    //通过标签名称</div><div class="line">  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</div><div class="line">  getElementById()    //通过元素Id，唯一性</div></pre></td></tr></table></figure></li><li><p>.call() 和 .apply() 的区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> 例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);</div><div class="line"></div><div class="line"> 注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。</div><div class="line"></div><div class="line">function add(a,b)</div><div class="line">&#123;</div><div class="line">    alert(a+b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function sub(a,b)</div><div class="line">&#123;</div><div class="line">    alert(a-b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">add.call(sub,3,1);</div></pre></td></tr></table></figure></li><li><p>数组和对象有哪些原生方法，列举一下？</p></li><li><p>JS 怎么实现一个类。怎么实例化这个类</p></li><li><p>JavaScript中的作用域与变量声明提升？</p></li><li><p>如何编写高性能的Javascript？</p></li><li><p>那些操作会造成内存泄漏？</p></li><li><p>JQuery的源码看过吗？能不能简单概况一下它的实现原理？</p></li><li><p>jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？</p></li><li><p>jquery中如何将数组转化为json字符串，然后再转化回来？</p></li><li><p>jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？</p></li><li><p>jquery.extend 与 jquery.fn.extend的区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* jquery.extend 为jquery类添加类方法，可以理解为添加静态方法</div><div class="line">* jquery.fn.extend:</div><div class="line">源码中jquery.fn = jquery.prototype，所以对jquery.fn的扩展，就是为jquery类添加成员函数</div><div class="line">使用：</div><div class="line">jquery.extend扩展，需要通过jquery类来调用，而jquery.fn.extend扩展，所有jquery实例都可以直接调用。</div></pre></td></tr></table></figure></li><li><p>jQuery 的队列是如何实现的？队列可以用在哪些地方？</p></li><li><p>谈一下Jquery中的bind(),live(),delegate(),on()的区别？</p></li><li><p>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p></li><li><p>是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？</p></li><li><p>jQuery 是通过哪个方法和 Sizzle 选择器结合的？（jQuery.fn.find()进入Sizzle）</p></li><li><p>针对 jQuery性能的优化方法？</p></li><li><p>Jquery与jQuery UI 有啥区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。</div><div class="line"></div><div class="line">*jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。</div><div class="line"> 提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等</div></pre></td></tr></table></figure></li><li><p>JQuery的源码看过吗？能不能简单说一下它的实现原理？</p></li><li><p>jquery 中如何将数组转化为json字符串，然后再转化回来？</p></li></ul><p>jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$.fn.stringifyArray = function(array) &#123;</div><div class="line">    return JSON.stringify(array)</div><div class="line">&#125;</div><div class="line"></div><div class="line">$.fn.parseArray = function(array) &#123;</div><div class="line">    return JSON.parse(array)</div><div class="line">&#125;</div><div class="line"></div><div class="line">然后调用：</div><div class="line">$(&quot;&quot;).stringifyArray(array)</div></pre></td></tr></table></figure><ul><li><p>jQuery和Zepto的区别？各自的使用场景？</p></li><li><p>针对 jQuery 的优化方法？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。</div><div class="line"></div><div class="line">*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。</div><div class="line"> 比如：var str=$(&quot;a&quot;).attr(&quot;href&quot;);</div><div class="line"></div><div class="line">*for (var i = size; i &lt; arr.length; i++) &#123;&#125;</div><div class="line"> for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：</div><div class="line"> for (var i = size, length = arr.length; i &lt; length; i++) &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>Zepto的点透问题如何解决？</p></li><li><p>jQueryUI如何自定义组件?</p></li><li><p>需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？</p></li><li><p>如何判断当前脚本运行在浏览器还是node环境中？（阿里）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">this === window ? &apos;browser&apos; : &apos;node&apos;;</div><div class="line"></div><div class="line">通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中</div></pre></td></tr></table></figure></li><li><p>移动端最小触控区域是多大？</p></li><li><p>jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jquery stop(): 如：$(&quot;#div&quot;).stop().animate(&#123;width:&quot;100px&quot;&#125;,100);</div></pre></td></tr></table></figure></li><li><p>把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？</p></li><li><p>移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）</p></li><li><p>知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout…)么? 能讲出他们各自的优点和缺点么?</p></li><li><p>Underscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？</p></li><li><p>解释JavaScript中的作用域与变量声明提升？</p></li><li><p>那些操作会造成内存泄漏？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。</div><div class="line">垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</div><div class="line"></div><div class="line">setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。</div><div class="line">闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</div></pre></td></tr></table></figure></li><li><p>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">* 多个事件同一个函数：</div><div class="line">$(&quot;div&quot;).on(&quot;click mouseover&quot;, function()&#123;&#125;);</div><div class="line">* 多个事件不同函数</div><div class="line">$(&quot;div&quot;).on(&#123;</div><div class="line">click: function()&#123;&#125;,</div><div class="line">mouseover: function()&#123;&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>Node.js的适用场景？</p></li><li><p>(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?</p></li><li><p>解释一下 Backbone 的 MVC 实现方式？</p></li><li><p>什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?</p></li><li><p>知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Chrome,Safari浏览器内核。</div></pre></td></tr></table></figure></li><li><p>如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?</p></li><li><p>前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?</p></li><li><p>简述一下 Handlebars 的基本用法？</p></li><li><p>简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？</p></li><li><p>用js实现千位分隔符?(来源：<a href="http://div.io/topic/744" target="_blank" rel="external">前端农民工</a>，提示：正则+replace)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">参考：http://www.tuicool.com/articles/ArQZfui</div><div class="line">function commafy(num) &#123;</div><div class="line">    return num &amp;&amp; num</div><div class="line">        .toString()</div><div class="line">        .replace(/(\d)(?=(\d&#123;3&#125;)+\.)/g, function($0, $1) &#123;</div><div class="line">            return $1 + &quot;,&quot;;</div><div class="line">        &#125;);</div><div class="line">&#125;</div><div class="line">console.log(commafy(1234567.90)); //1,234,567.90</div></pre></td></tr></table></figure></li><li><p>检测浏览器版本版本有哪些方式？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">功能检测、userAgent特征检测</div><div class="line"></div><div class="line">比如：navigator.userAgent</div><div class="line">//&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36</div><div class="line">  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36&quot;</div></pre></td></tr></table></figure></li><li><p>What is a Polyfill?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">polyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不支持这些标准 API 的浏览器中模拟它们。</div><div class="line">例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加 getCurrentPosition 函数以及“坐标”回调对象，</div><div class="line">所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览器未来的方式针对这些 API 进行开发，</div><div class="line">一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。</div></pre></td></tr></table></figure></li><li><p>做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">比如： html5shiv、Geolocation、Placeholder</div></pre></td></tr></table></figure></li><li><p>我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？</p></li><li><p>使用JS实现获取文件扩展名？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function getFileExtension(filename) &#123;</div><div class="line">  return filename.slice((filename.lastIndexOf(&quot;.&quot;) - 1 &gt;&gt;&gt; 0) + 2);</div><div class="line">&#125;</div><div class="line"></div><div class="line">String.lastIndexOf() 方法返回指定值（本例中的&apos;.&apos;）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。</div><div class="line">对于&apos;filename&apos;和&apos;.hiddenfile&apos;，lastIndexOf的返回值分别为0和-1无符号右移操作符(»&gt;) 将-1转换为4294967295，将-2转换为4294967294，这个方法可以保证边缘情况时文件名不变。</div><div class="line">String.prototype.slice() 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为&quot;&quot;。</div></pre></td></tr></table></figure></li></ul><h4 id="ECMAScript6-相关"><a href="#ECMAScript6-相关" class="headerlink" title="ECMAScript6 相关"></a><a href="">ECMAScript6 相关</a></h4><ul><li><p>Object.is() 与原来的比较操作符“ ===”、“ ==”的区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">两等号判等，会在比较时进行类型转换；</div><div class="line">三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）；</div><div class="line"></div><div class="line">Object.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，</div><div class="line">但 Object.is(NaN, NaN) 会返回 true.</div><div class="line"></div><div class="line">Object.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。</div></pre></td></tr></table></figure></li></ul><h4 id="前端框架相关"><a href="#前端框架相关" class="headerlink" title="前端框架相关"></a><a href="">前端框架相关</a></h4><ul><li>react-router 路由系统的实现原理？</li><li>React中如何解决第三方类库的问题?</li></ul><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a><a href="">其他问题</a></h2><ul><li><p>原来公司工作流程是怎么样的，如何与其他人协作的？如何跨部门合作的？</p></li><li><p>你遇到过比较难的技术问题是？你是如何解决的？</p></li><li><p>设计模式 知道什么是singleton, factory, strategy, decrator么?</p></li><li><p>常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？</p></li><li><p>页面重构怎么操作？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。</div><div class="line">也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。</div><div class="line"></div><div class="line">对于传统的网站来说重构通常是：</div><div class="line"></div><div class="line">表格(table)布局改为DIV+CSS</div><div class="line">使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)</div><div class="line">对于移动平台的优化</div><div class="line">针对于SEO进行优化</div><div class="line">深层次的网站重构应该考虑的方面</div><div class="line"></div><div class="line">减少代码间的耦合</div><div class="line">让代码保持弹性</div><div class="line">严格按规范编写代码</div><div class="line">设计可扩展的API</div><div class="line">代替旧有的框架、语言(如VB)</div><div class="line">增强用户体验</div><div class="line">通常来说对于速度的优化也包含在重构中</div><div class="line"></div><div class="line">压缩JS、CSS、image等前端资源(通常是由服务器来解决)</div><div class="line">程序的性能优化(如数据读写)</div><div class="line">采用CDN来加速资源加载</div><div class="line">对于JS DOM的优化</div><div class="line">HTTP服务器的文件缓存</div></pre></td></tr></table></figure></li><li><p>列举IE与其他浏览器不一样的特性？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1、事件不同之处：</div><div class="line"></div><div class="line">   触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；</div><div class="line"></div><div class="line">获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；</div><div class="line"></div><div class="line">阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；</div><div class="line"></div><div class="line">停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；</div></pre></td></tr></table></figure></li><li><p>99%的网站都需要被重构是那本书上写的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">网站重构：应用web标准进行设计（第2版）</div></pre></td></tr></table></figure></li><li><p>什么叫优雅降级和渐进增强？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。</div><div class="line">如：border-shadow</div><div class="line"></div><div class="line">渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</div><div class="line">如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；</div></pre></td></tr></table></figure></li><li><p>是否了解公钥加密和私钥加密。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;</div><div class="line">HTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。</div></pre></td></tr></table></figure></li><li><p>WEB应用从服务器主动推送Data到客户端有那些方式？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">html5提供的Websocket</div><div class="line">不可见的iframe</div><div class="line">WebSocket通过Flash</div><div class="line">XHR长时间连接</div><div class="line">XHR Multipart Streaming</div><div class="line">&lt;script&gt;标签的长时间连接(可跨域)</div></pre></td></tr></table></figure></li><li><p>对Node的优点和缺点提出了自己的看法？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，</div><div class="line">  因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。</div><div class="line">  此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，</div><div class="line">  因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。</div><div class="line"></div><div class="line">*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，</div><div class="line">  而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。</div></pre></td></tr></table></figure></li><li><p>你有用过哪些前端性能优化的方法？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</div><div class="line"></div><div class="line">（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</div><div class="line"></div><div class="line">（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</div><div class="line"></div><div class="line">（4） 当需要设置的样式很多时设置className而不是直接操作style。</div><div class="line"></div><div class="line">（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</div><div class="line"></div><div class="line">（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</div><div class="line"></div><div class="line">（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</div><div class="line"></div><div class="line">（8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。</div><div class="line">对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。</div></pre></td></tr></table></figure></li><li><p>http状态码有那些？分别代表是什么意思？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">简单版</div><div class="line">[</div><div class="line">100  Continue继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</div><div class="line">200  OK 正常返回信息</div><div class="line">201  Created  请求成功并且服务器创建了新的资源</div><div class="line">202  Accepted 服务器已接受请求，但尚未处理</div><div class="line">301  Moved Permanently  请求的网页已永久移动到新位置。</div><div class="line">302 Found  临时性重定向。</div><div class="line">303 See Other  临时性重定向，且总是使用 GET 请求新的 URI。</div><div class="line">304  Not Modified 自从上次请求后，请求的网页未修改过。</div><div class="line"></div><div class="line">400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</div><div class="line">401 Unauthorized 请求未授权。</div><div class="line">403 Forbidden  禁止访问。</div><div class="line">404 Not Found  找不到如何与 URI 相匹配的资源。</div><div class="line"></div><div class="line">500 Internal Server Error  最常见的服务器端错误。</div><div class="line">503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</div><div class="line">]</div><div class="line"></div><div class="line"> 完整版</div><div class="line"> 1**(信息类)：表示接收到请求并且继续处理</div><div class="line">100——客户必须继续发出请求</div><div class="line">101——客户要求服务器根据请求转换HTTP协议版本</div><div class="line"></div><div class="line"> 2**(响应成功)：表示动作被成功接收、理解和接受</div><div class="line">200——表明该请求被成功地完成，所请求的资源发送回客户端</div><div class="line">201——提示知道新文件的URL</div><div class="line">202——接受和处理、但处理未完成</div><div class="line">203——返回信息不确定或不完整</div><div class="line">204——请求收到，但返回信息为空</div><div class="line">205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件</div><div class="line">206——服务器已经完成了部分用户的GET请求</div><div class="line"></div><div class="line"> 3**(重定向类)：为了完成指定的动作，必须接受进一步处理</div><div class="line">300——请求的资源可在多处得到</div><div class="line">301——本网页被永久性转移到另一个URL</div><div class="line">302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。</div><div class="line">303——建议客户访问其他URL或访问方式</div><div class="line">304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用</div><div class="line">305——请求的资源必须从服务器指定的地址得到</div><div class="line">306——前一版本HTTP中使用的代码，现行版本中不再使用</div><div class="line">307——申明请求的资源临时性删除</div><div class="line"></div><div class="line"> 4**(客户端错误类)：请求包含错误语法或不能正确执行</div><div class="line">400——客户端请求有语法错误，不能被服务器所理解</div><div class="line">401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</div><div class="line">HTTP 401.1 - 未授权：登录失败</div><div class="line">　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败</div><div class="line">　　HTTP 401.3 - ACL 禁止访问资源</div><div class="line">　　HTTP 401.4 - 未授权：授权被筛选器拒绝</div><div class="line">HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败</div><div class="line">402——保留有效ChargeTo头响应</div><div class="line">403——禁止访问，服务器收到请求，但是拒绝提供服务</div><div class="line">HTTP 403.1 禁止访问：禁止可执行访问</div><div class="line">　　HTTP 403.2 - 禁止访问：禁止读访问</div><div class="line">　　HTTP 403.3 - 禁止访问：禁止写访问</div><div class="line">　　HTTP 403.4 - 禁止访问：要求 SSL</div><div class="line">　　HTTP 403.5 - 禁止访问：要求 SSL 128</div><div class="line">　　HTTP 403.6 - 禁止访问：IP 地址被拒绝</div><div class="line">　　HTTP 403.7 - 禁止访问：要求客户证书</div><div class="line">　　HTTP 403.8 - 禁止访问：禁止站点访问</div><div class="line">　　HTTP 403.9 - 禁止访问：连接的用户过多</div><div class="line">　　HTTP 403.10 - 禁止访问：配置无效</div><div class="line">　　HTTP 403.11 - 禁止访问：密码更改</div><div class="line">　　HTTP 403.12 - 禁止访问：映射器拒绝访问</div><div class="line">　　HTTP 403.13 - 禁止访问：客户证书已被吊销</div><div class="line">　　HTTP 403.15 - 禁止访问：客户访问许可过多</div><div class="line">　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效</div><div class="line">HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效</div><div class="line">404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL</div><div class="line">405——用户在Request-Line字段定义的方法不允许</div><div class="line">406——根据用户发送的Accept拖，请求资源不可访问</div><div class="line">407——类似401，用户必须首先在代理服务器上得到授权</div><div class="line">408——客户端没有在用户指定的饿时间内完成请求</div><div class="line">409——对当前资源状态，请求不能完成</div><div class="line">410——服务器上不再有此资源且无进一步的参考地址</div><div class="line">411——服务器拒绝用户定义的Content-Length属性请求</div><div class="line">412——一个或多个请求头字段在当前请求中错误</div><div class="line">413——请求的资源大于服务器允许的大小</div><div class="line">414——请求的资源URL长于服务器允许的长度</div><div class="line">415——请求资源不支持请求项目格式</div><div class="line">416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</div><div class="line">417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</div><div class="line"></div><div class="line"> 5**(服务端错误类)：服务器不能正确执行一个正确的请求</div><div class="line">HTTP 500 - 服务器遇到错误，无法完成请求</div><div class="line">　　HTTP 500.100 - 内部服务器错误 - ASP 错误</div><div class="line">　　HTTP 500-11 服务器关闭</div><div class="line">　　HTTP 500-12 应用程序重新启动</div><div class="line">　　HTTP 500-13 - 服务器太忙</div><div class="line">　　HTTP 500-14 - 应用程序无效</div><div class="line">　　HTTP 500-15 - 不允许请求 global.asa</div><div class="line">　　Error 501 - 未实现</div><div class="line"> HTTP 502 - 网关错误</div><div class="line"> HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常</div></pre></td></tr></table></figure></li><li><p>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> 注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，</div><div class="line"> 而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、</div><div class="line"> 到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；</div><div class="line"></div><div class="line"> 详细版：</div><div class="line">1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;</div><div class="line">2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;</div><div class="line">   3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;</div><div class="line">4、进行HTTP协议会话，客户端发送报头(请求报头);</div><div class="line">   5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;</div><div class="line">   6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;</div><div class="line">7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;</div><div class="line">   8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;</div><div class="line">   9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;</div><div class="line">   10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。</div><div class="line"></div><div class="line"> 简洁版：</div><div class="line">浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；</div><div class="line">服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；</div><div class="line">浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；</div><div class="line">载入解析到的资源文件，渲染页面，完成。</div></pre></td></tr></table></figure></li><li><p>部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？</p></li><li><p>从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?</p></li><li><p>除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？</p></li><li><p>你用的得心应手用的熟练地编辑器&amp;开发环境是什么样子？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Sublime Text 3 + 相关插件编写前端代码</div><div class="line">Google chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能</div><div class="line">Node.js+Gulp</div><div class="line">git 用于版本控制和Code Review</div></pre></td></tr></table></figure></li><li><p>对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。</div><div class="line">1、实现界面交互</div><div class="line">2、提升用户体验</div><div class="line">3、有了Node.js，前端可以实现服务端的一些事情</div><div class="line"></div><div class="line"></div><div class="line">前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，</div><div class="line"></div><div class="line">参与项目，快速高质量完成实现效果图，精确到1px；</div><div class="line"></div><div class="line">与团队成员，UI设计，产品经理的沟通；</div><div class="line"></div><div class="line">做好的页面结构，页面重构和用户体验；</div><div class="line"></div><div class="line">处理hack，兼容、写出优美的代码格式；</div><div class="line"></div><div class="line">针对服务器的优化、拥抱最新前端技术。</div></pre></td></tr></table></figure></li><li><p>你怎么看待Web App 、hybrid App、Native App？</p></li><li><p>你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）</p></li><li><p>你对加班的看法？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">加班就像借钱，原则应当是------救急不救穷</div></pre></td></tr></table></figure></li><li><p>平时如何管理你的项目？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；</div><div class="line"></div><div class="line">编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；</div><div class="line"></div><div class="line">标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；</div><div class="line"></div><div class="line">页面进行标注（例如 页面 模块 开始和结束）；</div><div class="line"></div><div class="line">CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；</div><div class="line"></div><div class="line">JS 分文件夹存放 命名以该JS功能为准的英文翻译。</div><div class="line"></div><div class="line">图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理</div></pre></td></tr></table></figure></li><li><p>如何设计突发大规模并发架构？</p></li><li><p>当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？</p></li><li><p>说说最近最流行的一些东西吧？常去哪些网站？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ES6\WebAssembly\Node\MVVM\Web Components\React\React Native\Webpack 组件化</div></pre></td></tr></table></figure></li><li><p>知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?</p></li><li><p>移动端（Android IOS）怎么做好用户体验?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">清晰的视觉纵线、</div><div class="line">信息的分组、极致的减法、</div><div class="line">利用选择代替输入、</div><div class="line">标签及文字的排布方式、</div><div class="line">依靠明文确认密码、</div><div class="line">合理的键盘利用、</div></pre></td></tr></table></figure></li><li><p>简单描述一下你做过的移动APP项目研发流程？</p></li><li><p>你在现在的团队处于什么样的角色，起到了什么明显的作用？</p></li><li><p>你认为怎样才是全端工程师（Full Stack developer）？</p></li><li><p>介绍一个你最得意的作品吧？</p></li><li><p>你有自己的技术博客吗，用了哪些技术？</p></li><li><p>对前端安全有什么看法？</p></li><li><p>是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？</p></li><li><p>项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。</p></li><li><p>最近在学什么东西？</p></li><li><p>你的优点是什么？缺点是什么？</p></li><li><p>如何管理前端团队?</p></li><li><p>最近在学什么？能谈谈你未来3，5年给自己的规划吗？</p></li></ul><h2 id="前端学习网站推荐"><a href="#前端学习网站推荐" class="headerlink" title="前端学习网站推荐"></a><a href="">前端学习网站推荐</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">1. 极客标签：     http://www.gbtags.com/</div><div class="line"></div><div class="line">2. 码农周刊：     http://weekly.manong.io/issues/</div><div class="line"></div><div class="line">3. 前端周刊：     http://www.feweekly.com/issues</div><div class="line"></div><div class="line">4. 慕课网：       http://www.imooc.com/</div><div class="line"></div><div class="line">5. div.io： http://div.io</div><div class="line"></div><div class="line">6. Hacker News： https://news.ycombinator.com/news</div><div class="line"></div><div class="line">7. InfoQ：       http://www.infoq.com/</div><div class="line"></div><div class="line">8. w3cplus：     http://www.w3cplus.com/</div><div class="line"></div><div class="line">9. Stack Overflow： http://stackoverflow.com/</div><div class="line"></div><div class="line">10.w3school：    http://www.w3school.com.cn/</div><div class="line"></div><div class="line">11.mozilla：     https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</div></pre></td></tr></table></figure><h2 id="文档推荐"><a href="#文档推荐" class="headerlink" title="文档推荐"></a><a href="">文档推荐</a></h2><ol><li><a href="http://docs.huihoo.com/jquery/jquery-fundamentals/zh-cn/index.html" target="_blank" rel="external">jQuery 基本原理</a></li><li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">JavaScript 秘密花园</a></li><li><a href="http://css.doyoe.com/" target="_blank" rel="external">CSS参考手册</a></li><li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript 标准参考教程</a></li><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前端开发知识点：&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="筆記" scheme="http://yoursite.com/categories/%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="front-end" scheme="http://yoursite.com/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>vue react 資料</title>
    <link href="http://yoursite.com/2017/10/17/2017-10-17vue%20React%20%E8%B5%84%E6%96%99/"/>
    <id>http://yoursite.com/2017/10/17/2017-10-17vue React 资料/</id>
    <published>2017-10-17T13:12:09.000Z</published>
    <updated>2017-11-03T07:50:20.308Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.kancloud.cn/jikeytang/qq/81132" target="_blank" rel="external">匯總</a><br><a id="more"></a></p><p><a href="http://t.cn/RGE7EXW" target="_blank" rel="external">群内资料</a></p><p><a href="http://t.cn/Rb1aUQT" target="_blank" rel="external">Vuejs群资料</a></p><p><a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">官网</a></p><p><a href="http://forum.vuejs.org/" target="_blank" rel="external">论坛</a></p><p><a href="http://i.youku.com/u/UMzQxOTE4MDE5Mg==" target="_blank" rel="external">小凡哥Vuejs视频</a></p><p><a href="https://github.com/bhnddowinf/vuejs-learn" target="_blank" rel="external">讲解 vue.js 实例</a></p><p><a href="http://![img](file:///C:\Users\zzs\AppData\Local\Temp\%W@GJ$ACOF(TYDYECOKVDYB.png" target="_blank" rel="external">Vue开源项目库</a>t.cn/Ri90k28)</p><p><a href="http://vuefe.cn/" target="_blank" rel="external">vue2.0相关文档</a></p><p><a href="http://vuejs.org/guide/" target="_blank" rel="external">中文文档</a></p><p><a href="http://router.vuejs.org/zh-cn/index.html" target="_blank" rel="external">官网原文文档</a></p><p><a href="http://vuex.vuejs.org/en/index.html" target="_blank" rel="external">vue-router2.0中文文档</a></p><p><a href="https://github.com/bhnddowinf/vuejs2-learn" target="_blank" rel="external">vuex2.0 英文文档</a></p><p><a href="https://github.com/opendigg/awesome-github-vue" target="_blank" rel="external">v2学习项目</a></p><p>vue的组件以及demo全集</p><h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><p>react：647575542<br><a href="https://github.com/enaqx/awesome-react" target="_blank" rel="external">https://github.com/enaqx/awesome-react</a> </p><p><a href="http://www.react-china.org/" target="_blank" rel="external">react海量资源</a></p><p><a href="https://facebook.github.io/react/index.html" target="_blank" rel="external">react.js 中文论坛</a></p><p><a href="https://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">react.js 官方网址</a> </p><p><a href="http://material-ui.com/#/" target="_blank" rel="external">react.js 官方文档</a></p><p><a href="http://touchstonejs.io/" target="_blank" rel="external">react.js material UI</a></p><p><a href="http://amazeui.org/react/" target="_blank" rel="external">react.js TouchstoneJS UI</a></p><p><a href="http://ant.design/" target="_blank" rel="external">react.js amazeui UI</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.kancloud.cn/jikeytang/qq/81132&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;匯總&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技術" scheme="http://yoursite.com/categories/%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue react 資料</title>
    <link href="http://yoursite.com/2017/10/17/2017-10-17vue/"/>
    <id>http://yoursite.com/2017/10/17/2017-10-17vue/</id>
    <published>2017-10-17T13:12:09.000Z</published>
    <updated>2017-11-03T08:01:47.105Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><a href="http://www.kancloud.cn/jikeytang/qq/81132" target="_blank" rel="external">匯總</a></p><p><a href="http://t.cn/RGE7EXW" target="_blank" rel="external">群内资料</a></p><p><a href="http://t.cn/Rb1aUQT" target="_blank" rel="external">Vuejs群资料</a></p><p><a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">官网</a></p><p><a href="http://forum.vuejs.org/" target="_blank" rel="external">论坛</a></p><p><a href="http://i.youku.com/u/UMzQxOTE4MDE5Mg==" target="_blank" rel="external">小凡哥Vuejs视频</a></p><p><a href="https://github.com/bhnddowinf/vuejs-learn" target="_blank" rel="external">讲解 vue.js 实例</a></p><p><a href="http://![img](file:///C:\Users\zzs\AppData\Local\Temp\%W@GJ$ACOF(TYDYECOKVDYB.png" target="_blank" rel="external">Vue开源项目库</a>t.cn/Ri90k28)</p><p><a href="http://vuefe.cn/" target="_blank" rel="external">vue2.0相关文档</a></p><p><a href="http://vuejs.org/guide/" target="_blank" rel="external">中文文档</a></p><p><a href="http://router.vuejs.org/zh-cn/index.html" target="_blank" rel="external">官网原文文档</a></p><p><a href="http://vuex.vuejs.org/en/index.html" target="_blank" rel="external">vue-router2.0中文文档</a></p><p><a href="https://github.com/bhnddowinf/vuejs2-learn" target="_blank" rel="external">vuex2.0 英文文档</a></p><p><a href="https://github.com/opendigg/awesome-github-vue" target="_blank" rel="external">v2学习项目</a></p><p>vue的组件以及demo全集</p><h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><p>react：647575542<br><a href="https://github.com/enaqx/awesome-react" target="_blank" rel="external">https://github.com/enaqx/awesome-react</a> </p><p><a href="http://www.react-china.org/" target="_blank" rel="external">react海量资源</a></p><p><a href="https://facebook.github.io/react/index.html" target="_blank" rel="external">react.js 中文论坛</a></p><p><a href="https://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">react.js 官方网址</a> </p><p><a href="http://material-ui.com/#/" target="_blank" rel="external">react.js 官方文档</a></p><p><a href="http://touchstonejs.io/" target="_blank" rel="external">react.js material UI</a></p><p><a href="http://amazeui.org/react/" target="_blank" rel="external">react.js TouchstoneJS UI</a></p><p><a href="http://ant.design/" target="_blank" rel="external">react.js amazeui UI</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;http://www.kancloud.cn/jikeytang/qq/81132&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;匯總&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://t.cn/R
      
    
    </summary>
    
      <category term="技術" scheme="http://yoursite.com/categories/%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>java程序执行原理</title>
    <link href="http://yoursite.com/2017/10/17/2017-10-17java%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2017/10/17/2017-10-17java程序执行原理/</id>
    <published>2017-10-17T11:46:24.000Z</published>
    <updated>2017-10-17T11:47:46.417Z</updated>
    
    <content type="html"><![CDATA[<p>java  应用可以打包成jar 格式， jar格式其实只是一种很普通的压缩格式，与zip格式一样，只不过是它会在压缩文件的目录结构中增加一个META-INF/ MANIFEST.MF 的元文件。</p><a id="more"></a><p>​     我们知道，经过编译的字节码class文件可以直接放到java虚拟机去解释执行（JIT方式）， 我们通过在命令行调用“java  class文件的路径”就可以使用jvm（java.exe/javaw.exe）来解释执行这些字节码文件。   </p><p>​     我们知道，java源代码(.java文件)经过java编译器javac编译以后，会得到java的字节码的中间语言文件，也就是我们通常所说的类文件（.class文件），这些类文件会按照java源文件的包结构分目录存放，jar 命令的作用就是按照这种包目录结构打包这些字节码的class文件，形成一个jar包，并且增加一个META-INF/ MANIFEST.MF 的元文件 。这样打包的jar文件的确是包含了按照包目录结构存放的字节码class文件，但是这时候如果你在命令行：jar -jar  a.jar 的话，会提示你指定一个主类，这是因为，虽然jar包里面包含了按照包目录结构存放的字节码class文件，但是却并不知道主类（含有 public static void main(String[])入口 方法的类）的位置，所以需要你手动的指定主类，然后才可以开始执行。</p><p>​    当然， 只需要在打包jar文件的时候，将主类的信息包含进去了以后，再：jar -jar  a.jar 的话， 就不需要手动的指出主类是哪个类了。进行如下操作：</p><p>​    新建一个.mf文件，名字任意，例如：manifest.mf ，在里面指定主类是哪个类，即：写入一行 ：Main-Class: test.Test。然后，打包： jar  cvfm test.jar manifest.mf test； 这样打成的包test.jar里面就已经包含主类是哪个类的信息了。这样的话，在命令行里面直接执行：jar -jar    test.jar 就可以运行该应用了，这种情况下， jvm会去这个class文件的包中寻找入口函数如何进入执行。</p><p>​     我们发布java应用的时候，直接发布按照包结构存放的class文件夹显然是很不方便的，一般需要打包成jar文件来发布。 就好象我们将java应用部署到tomcat web 服务器上去的时候一样， 虽然直接将按照包结构存放的class文件夹放过去是可以的，但是通常还是要打包成jar包的格式来部署，因为这样文件的数量会少，便于管理部署的。</p><p>​       </p><p>​     将命令行的“java -jar jar文件的路径” 写到一个.bat文件里面 或者linux下面的shell文件里面，这样就可以通过执行.bat文件或者shell脚步来执行java 应用程序了，也就是说可以直接双击windows下的.bat文件或者linux下的.sh文件来运行java应用程序了。</p><p>  一般在安装jre (Java Runtime Environment) 的时候，安装文件会将 .jar 文件映射给 javaw.exe 打开，如果没有关联，也可以手动的通过文件夹选项来手动关联，关联以后，当用户在windows下双击jar文件的时候，资源管理器就会调用javaw来运行该jar文件，这样就可以实现双击运行jar文件了。</p><p>jdk 相关过程原理分析。</p><p> 我们知道，在jdk的bin目录下有很多的exe文件，例如java.exe， javac.exe, javadoc.exe等。 这些exe文件格式实质上是windows操作系统下的可执行文件格式（在dos下还有一种可执行可是是.com后缀的格式，不过现在已经不常见了），它们是由C语言写成的.c文件经过编译后生成的。例如：java.exe对应的源码就是java.c文件。java.c的main入口函数中会调用函数：CreateExecutionEnvironment，该函数中会查找jre路径，然后根据jvm.cfg配置文件配置的虚拟机动态链接库（jvm.dll）路径参数装载jvm.dll动态连接库，也就是加载java虚拟机（java虚拟机是C++写的，也有部分C代码），然后初始化jvm.dll（所有的dll都是本地语言写成的）， 并挂接到JNIEnv（JNI调用接口）实例，最后调用JNIEnv实例装载并处理class类。<br>​      由上面的分析我们可以看到，windows操作系统下的exe文件大部分情况下是使用windows本地语言所写的代码编译而成的的，这些exe文件用于完成一定的功能，例如java.exe， 可以用来查找并加载jvm.dll ，然后通过调用jvm.dll 的  接口来加载java的字节码中间语言文件.class文件，并启动java应用程序。 或者完成其它的一些功能等。exe文件也可能是本地语言代码生成的exe文件与jar包压缩而成的。</p><p>​    </p><p>​    </p><p>​      </p><p>   更加方便的方法是，将jar做成exe。例如eclipse 就是一个java 应用程序，就采用了 使用exe来wrapper。</p><p>   wrapper 基本原理： 在本地化语言（C或者C++等）代码中调用jvm.dll，然后通过jvm.dll提供的接口加载压缩在一起的jar包中的主类class的入口方法（ static void main(String args[])， 从而启动java应用程序，这种加壳方式形成的java应用的exe文件在启动的时候会表现为一个exe进程，这种方式更常见。（形式是一个由本地化语言exe和jar包一起压缩而成的一个exe文件）；</p><p>​        也可以在本地化语言（C或者C++等）代码中调用java.exe/javaw.exe进程（java.exe进程会执行前一种方法的步骤来完成jvm.dll的加载）来加载jvm.dll，然后通过jvm.dll提供的接口加载压缩在一起的jar包中的主类class的入口方法（ static void main(String args[])， 从而启动java应用程序，这种加壳方式形成的java应用的exe文件在启动的时候会表现为一个exe进程和一个javaw进程。（形式是一个由本地化语言exe和jar包一起压缩而成的一个exe文件，当然，也可以选择不将jar文件和本地exe文件压缩在一起）；</p><p>   这两种根本上都是通过本地代码来加载java虚拟机，然后在本地代码中通过调用jvm.dll的接口来完成class主文件的加载和java应用的启动的。</p><p>   具体来说，也有很多种方法。</p><p>   可以使用c语言等本地语言创建一个本地代码（编译后生成exe文件），在该本地代码中加载jvm的动态库，并通过动态库的接口来在本进程内启动java虚拟机，即调用JNI_CreateJavaVM这个导出函数来创建Java虚拟机，得到JNIEnv指针，然后调用FindClass查找Main Class，之后调用GetStaticMethodID方法得到main方法，并执行main方法。    编译该本地代码得到一个exe文件。</p><p>   将Java应用程序的class目录结构打包为jar文件，并与本地代码exe文件合并：在Dos提示符下执行copy命令:</p><p>C:/&gt;copy test.exe+test.jar test.exe</p><p>其实，就是将Java打包文件追加到exe文件尾部。打开文件属性对话框，可看到有“压缩文件”属性页。</p><p>老牌的JBuilder.exe开发工具编译生成的exe文件即采用如下方式生成。</p><p>后记：大家在使用<a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a> 3.2和<a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a> 3.3时，在任务管理器中会看到二者的不同。</p><p><a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a> 3.2是先启动<a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a>.exe文件，然后由<a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a>.exe启动Javaw.exe文件来创建虚拟机。</p><p><a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a> 3.2在任务管理器中显示为<a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a>.exe和javaw.exe两个进程。</p><p><a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a> 3.3在任务管理器中显示为<a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a>.exe一个进程。</p><p>从上面可以看出，<a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a> 3.2和<a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a> 3.3采用了不同的虚拟机加载方式。</p><p><a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a> 3.2采用创建子进程的方法调用javaw.exe来启动，在windows下面可以用CreateProcess方法，此种方法较简单，具体可参见<a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a>源码。</p><p><a href="http://gocom.primeton.com/modules/gSpace/about_onetag.php?tagid=103&amp;tagname=Eclipse" target="_blank" rel="external">Eclipse</a> 3.3加载java虚拟机的另外一种方法是加载jvm的动态库，并通过动态库的接口来在本进程内启动java虚拟机。本文开头即采用的第二种方法。</p><p>这很简单，启动vc，建一个win32 project，WinMain里使用ShellExecute函数即可，主要代码是：</p><p>#include “stdafx.h”<br>#include “resource.h”</p><p>int APIENTRY WinMain(HINSTANCE hInstance,<br>HINSTANCE hPrevInstance,<br>LPSTR lpCmdLine,<br>int nCmdShow)<br>{<br>ShellExecute(NULL,”open”,”.//jre6//bin//javaw.exe”,”-ea -Dfile.encoding=GB18030 -Xmx600M -splash:res//splash.png -classpath /“./lib/*/“ com.zms.laser.uis.Starter”,”.//“,SW_SHOWNORMAL);<br>return 0;<br>}<br>要给编译出来的可执行程序一个图标，很简单，只要添加一个icon的资源，让这个icon的id最小即可。编译器会把具有最小id的icon当作最终exe的图标。</p><p>所有的给java 应用 加 exe 外壳的 工具软件 采用的都是以上原理中的一种。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java  应用可以打包成jar 格式， jar格式其实只是一种很普通的压缩格式，与zip格式一样，只不过是它会在压缩文件的目录结构中增加一个META-INF/ MANIFEST.MF 的元文件。&lt;/p&gt;
    
    </summary>
    
      <category term="筆記" scheme="http://yoursite.com/categories/%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>汇总</title>
    <link href="http://yoursite.com/2017/10/16/2017-10-16%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2017/10/16/2017-10-16汇总/</id>
    <published>2017-10-16T08:09:08.000Z</published>
    <updated>2017-10-17T11:56:06.765Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一些简单的名词缩写以及技术栈"><a href="#一些简单的名词缩写以及技术栈" class="headerlink" title="一些简单的名词缩写以及技术栈"></a><strong>一些简单的名词缩写以及技术栈</strong></h4><a id="more"></a><h6 id="ORM框架"><a href="#ORM框架" class="headerlink" title="ORM框架"></a>ORM框架</h6><p>（object relational mapping）對象關係映射</p><h6 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h6><p>（remote procedure call protocol） 遠程過程調用協議</p><h6 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h6><p>属于<a href="https://baike.baidu.com/item/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE" target="_blank" rel="external">远程访问</a>技术，简单地说就是利用<a href="https://baike.baidu.com/item/%E5%85%AC%E7%94%A8%E7%BD%91%E7%BB%9C" target="_blank" rel="external">公用网络</a>架设<a href="https://baike.baidu.com/item/%E4%B8%93%E7%94%A8%E7%BD%91%E7%BB%9C" target="_blank" rel="external">专用网络</a>。    跳板機</p><h6 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h6><p>（Virtual Private Server） 虚拟专用服务器</p><h6 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h6><p>（network file System） 網絡文件系統</p><h6 id="Owncloud"><a href="#Owncloud" class="headerlink" title="Owncloud"></a><a href="https://www.logcg.com/archives/2750.html" target="_blank" rel="external">Owncloud</a></h6><h6 id="Velocity技术"><a href="#Velocity技术" class="headerlink" title="Velocity技术"></a><a href="http://blog.csdn.net/fasttalk/article/details/398059/" target="_blank" rel="external">Velocity技术</a></h6><p>MVC框架显示层（速度）Java模版引擎技术　代替jsp</p><h6 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a><a href="http://koa.bootcss.com/#" target="_blank" rel="external">Koa</a></h6><p>基于node.js平台的下一代web开发框架（express团队）</p><h6 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501245426ad4b91f2b880464ba876a8e3043fc8ef000" target="_blank" rel="external">Node.js</a></h6><blockquote><p>运行在服务器端的js</p><p>grunt:将npm插件通过某些配置文件（package.json Gruntfile.js)的设置实现自动化执行 </p><p>npm：包管理程序，通过命令行与npm服务器连接并下载所需插件</p></blockquote><h6 id="Vue-React"><a href="#Vue-React" class="headerlink" title="Vue     React"></a><a href="https://cn.vuejs.org/v2/guide/syntax.html" target="_blank" rel="external">Vue</a>     <a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">React</a></h6><p>前端框架 </p><h6 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><a href="http://www.docker.org.cn/book/docker/what-is-docker-16.html" target="_blank" rel="external">Docker</a></h6><p>是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><h6 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><a href="http://www.runoob.com/redis/redis-intro.html" target="_blank" rel="external">Redis</a></h6><p>Redis是一个 <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80" target="_blank" rel="external">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库。</p><h4 id="Java-Web项目框架"><a href="#Java-Web项目框架" class="headerlink" title="Java Web项目框架"></a><strong>Java Web项目框架</strong></h4><h6 id="1-S2SH-struts2-spring-hibernate"><a href="#1-S2SH-struts2-spring-hibernate" class="headerlink" title="1.S2SH(struts2+spring+hibernate)"></a>1.S2SH(struts2+spring+hibernate)</h6><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/2177101238471680.htm" target="_blank" rel="external">基于Struts2+Spring3+Hibernate4开发java Web企业应用开源框架s2jh源码分享**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/2168677709335552.htm" target="_blank" rel="external">spring+hibernate+struts2开发OA企业办公管理系统源码分享**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/1550463494638592.htm" target="_blank" rel="external">Struts2+Hibernate3+Spring三大框架技术实现MySQL数据分页**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/1550463430888448.htm" target="_blank" rel="external">Spring+struts2+hibernate+easyui基础权限管理框架**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/2030578238245888.htm" target="_blank" rel="external">Spring+Struts2+Hibernate三大框架开发企业人力资源管理系统源代码下载**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/1840816984820736.htm" target="_blank" rel="external">Spring mvc+struts2+Hibernate整合实例代码(注解详解)**</a></p><h6 id="2-S2SM-struts2-spring-mybatis"><a href="#2-S2SM-struts2-spring-mybatis" class="headerlink" title="2.S2SM(struts2+spring+mybatis)"></a>2.S2SM(struts2+spring+mybatis)</h6><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/2141064953596928.htm" target="_blank" rel="external">Spring+Struts2+mybatis手动配置三大框架整合源代码下载**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/1550463447796736.htm" target="_blank" rel="external">Struts2+mybatis开发音乐分享系统**</a></p><h6 id="3-SSH-spring-mvc-spring-hibernate或struts-spring-hibernate"><a href="#3-SSH-spring-mvc-spring-hibernate或struts-spring-hibernate" class="headerlink" title="3.SSH(spring mvc+spring+hibernate或struts+spring+hibernate)"></a>3.SSH(spring mvc+spring+hibernate或struts+spring+hibernate)</h6><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/2287970382777344.htm" target="_blank" rel="external">Spring MVC+Spring+Hibrenarte实现的简单的CRUD项目实例**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/2170238887660544.htm" target="_blank" rel="external">springMVC注解与hibernate完美结合完成基本的增删改查demo源码下载**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/2139376672148480.htm" target="_blank" rel="external">springmvc+hibernate+spring+easyui开发bsalse进销存后台管理系统源代码下载**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/2051547504970752.htm" target="_blank" rel="external">spring 3.0+spring MVC+Hibernate框架搭建教程(附：springMVC文件上传功能)**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/2014401579273216.htm" target="_blank" rel="external">spring+struts2+Hibernate三大框架开发某制药厂管理系统源代码下载**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/1840816984820736.htm" target="_blank" rel="external">Spring mvc+struts2+Hibernate整合实例代码(注解详解)**</a></p><h6 id="4-SSM-spring-mvc-spring-mybatis"><a href="#4-SSM-spring-mvc-spring-mybatis" class="headerlink" title="4.SSM(spring mvc+spring+mybatis)"></a>4.SSM(spring mvc+spring+mybatis)</h6><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/1774043357989888.htm" target="_blank" rel="external">SpringMVC+Mybatis整合实现简单权限控制系统代码**</a></p><h6 id="5-JSJ-javabean-servlet-jsp"><a href="#5-JSJ-javabean-servlet-jsp" class="headerlink" title="5.JSJ(javabean+servlet+jsp)"></a>5.JSJ(javabean+servlet+jsp)</h6><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/2251648892881920.htm" target="_blank" rel="external">jsp+servlet+javabean编写的一个java开源免费简易电子商城系统源码，适合初学者**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/2016365453298688.htm" target="_blank" rel="external">JSP Servlet开发博客天空源代码下载**</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.zuidaima.com/share/2005009709976576.htm" target="_blank" rel="external">JSP+servlet开发在线投票统计管理系统源代码下载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一些简单的名词缩写以及技术栈&quot;&gt;&lt;a href=&quot;#一些简单的名词缩写以及技术栈&quot; class=&quot;headerlink&quot; title=&quot;一些简单的名词缩写以及技术栈&quot;&gt;&lt;/a&gt;&lt;strong&gt;一些简单的名词缩写以及技术栈&lt;/strong&gt;&lt;/h4&gt;
    
    </summary>
    
      <category term="技術" scheme="http://yoursite.com/categories/%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="總結" scheme="http://yoursite.com/tags/%E7%B8%BD%E7%B5%90/"/>
    
  </entry>
  
  <entry>
    <title>springmvc常用注解标签详解</title>
    <link href="http://yoursite.com/2017/10/16/2017-10-16springmvc%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%A0%87%E7%AD%BE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/10/16/2017-10-16springmvc常用注解标签详解/</id>
    <published>2017-10-16T02:39:23.000Z</published>
    <updated>2017-10-16T03:01:29.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springmvc常用注解标签详解"><a href="#springmvc常用注解标签详解" class="headerlink" title="springmvc常用注解标签详解"></a>springmvc常用注解标签详解</h1><h2 id="1、-Controller"><a href="#1、-Controller" class="headerlink" title="1、@Controller"></a>1、@Controller</h2><a id="more"></a><p>在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。</p><p>@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。单单使用@Controller 标记在一个类上还不能真正意义上的说它就是SpringMVC 的一个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢？这个时候就需要我们把这个控制器类交给Spring 来管理。有两种方式：</p><p>　　（1）在SpringMVC 的配置文件中定义MyController 的bean 对象。</p><p>　　（2）在SpringMVC 的配置文件中告诉Spring 该到哪里去找标记为@Controller 的Controller 控制器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!--方式一--&gt;</div><div class="line">&lt;bean class=&quot;com.host.app.web.controller.MyController&quot;/&gt;</div><div class="line">&lt;!--方式二--&gt;</div><div class="line">&lt; context:component-scan base-package = &quot;com.host.app.web&quot; /&gt;//路径写到controller的上一层(扫描包详解见下面浅析)</div></pre></td></tr></table></figure><h2 id="2、-RequestMapping"><a href="#2、-RequestMapping" class="headerlink" title="2、@RequestMapping"></a>2、@RequestMapping</h2><p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><p>RequestMapping注解有六个属性，下面我们把她分成三类进行说明（下面有相应示例）。</p><p><strong>1、 value， method；</strong></p><p>value：     指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；</p><p>method：  指定请求的method类型， GET、POST、PUT、DELETE等；</p><p><strong>2、consumes，produces</strong></p><p>consumes： 指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;</p><p>produces:    指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</p><p><strong>3、params，headers</strong></p><p>params： 指定request中必须包含某些参数值是，才让该方法处理。</p><p>headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p><h2 id="3、-Resource和-Autowired"><a href="#3、-Resource和-Autowired" class="headerlink" title="3、@Resource和@Autowired"></a>3、@Resource和@Autowired</h2><p>@Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。</p><p><strong>1、共同点</strong></p><p>两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。</p><p><strong>2、不同点</strong></p><p>（1）@Autowired</p><p>@Autowired为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。</p><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class TestServiceImpl &#123;</div><div class="line">    // 下面两种@Autowired只要使用一种即可</div><div class="line">    @Autowired</div><div class="line">    private UserDao userDao; // 用于字段上</div><div class="line">    </div><div class="line">    @Autowired</div><div class="line">    public void setUserDao(UserDao userDao) &#123; // 用于属性的方法上</div><div class="line">        this.userDao = userDao;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class TestServiceImpl &#123;</div><div class="line">    @Autowired</div><div class="line">    @Qualifier(&quot;userDao&quot;)</div><div class="line">    private UserDao userDao; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>（2）@Resource</p><p>@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class TestServiceImpl &#123;</div><div class="line">    // 下面两种@Resource只要使用一种即可</div><div class="line">    @Resource(name=&quot;userDao&quot;)</div><div class="line">    private UserDao userDao; // 用于字段上</div><div class="line">    </div><div class="line">    @Resource(name=&quot;userDao&quot;)</div><div class="line">    public void setUserDao(UserDao userDao) &#123; // 用于属性的setter方法上</div><div class="line">        this.userDao = userDao;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。</p><p>@Resource装配顺序：</p><p>①如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。</p><p>②如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</p><p>③如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。</p><p>④如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</p><p>@Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。</p><h2 id="4、-ModelAttribute和-SessionAttributes"><a href="#4、-ModelAttribute和-SessionAttributes" class="headerlink" title="4、@ModelAttribute和 @SessionAttributes"></a>4、@ModelAttribute和 @SessionAttributes</h2><p>代表的是：该Controller的所有方法在调用前，先执行此@ModelAttribute方法，可用于注解和方法参数中，可以把这个@ModelAttribute特性，应用在BaseController当中，所有的Controller继承BaseController，即可实现在调用Controller时，先执行@ModelAttribute方法。</p><p> @SessionAttributes即将值放到session作用域中，写在class上面。</p><p>具体示例参见下面：使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</p><h2 id="5、-PathVariable"><a href="#5、-PathVariable" class="headerlink" title="5、@PathVariable"></a>5、@PathVariable</h2><p>用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出uri模板中的变量作为参数。如：</p><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Controller  </div><div class="line">public class TestController &#123;  </div><div class="line">     @RequestMapping(value=&quot;/user/&#123;userId&#125;/roles/&#123;roleId&#125;&quot;,method = RequestMethod.GET)  </div><div class="line">     public String getLogin(@PathVariable(&quot;userId&quot;) String userId,  </div><div class="line">         @PathVariable(&quot;roleId&quot;) String roleId)&#123;  </div><div class="line">         System.out.println(&quot;User Id : &quot; + userId);  </div><div class="line">         System.out.println(&quot;Role Id : &quot; + roleId);  </div><div class="line">         return &quot;hello&quot;;  </div><div class="line">     &#125;  </div><div class="line">     @RequestMapping(value=&quot;/product/&#123;productId&#125;&quot;,method = RequestMethod.GET)  </div><div class="line">     public String getProduct(@PathVariable(&quot;productId&quot;) String productId)&#123;  </div><div class="line">           System.out.println(&quot;Product Id : &quot; + productId);  </div><div class="line">           return &quot;hello&quot;;  </div><div class="line">     &#125;  </div><div class="line">     @RequestMapping(value=&quot;/javabeat/&#123;regexp1:[a-z-]+&#125;&quot;,  </div><div class="line">           method = RequestMethod.GET)  </div><div class="line">     public String getRegExp(@PathVariable(&quot;regexp1&quot;) String regexp1)&#123;  </div><div class="line">           System.out.println(&quot;URI Part 1 : &quot; + regexp1);  </div><div class="line">           return &quot;hello&quot;;  </div><div class="line">     &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><h2 id="6、-requestParam"><a href="#6、-requestParam" class="headerlink" title="6、@requestParam"></a>6、@requestParam</h2><p>@requestParam主要用于在SpringMVC后台控制层获取参数，类似一种是request.getParameter(“name”)，它有三个常用参数：defaultValue = “0”, required = false, value = “isApp”；defaultValue 表示设置默认值，required 铜过boolean设置是否是必须要传入的参数，value 值表示接受的传入的参数类型。</p><h2 id="7、-ResponseBody"><a href="#7、-ResponseBody" class="headerlink" title="7、@ResponseBody"></a>7、@ResponseBody</h2><p>作用： 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</p><p>使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</p><h2 id="8、-Component"><a href="#8、-Component" class="headerlink" title="8、@Component"></a>8、<strong>@Component</strong></h2><p>相当于通用的注解，当不知道一些类归到哪个层时使用，但是不建议。</p><h2 id="9、-Repository"><a href="#9、-Repository" class="headerlink" title="9、@Repository"></a>9、@Repository</h2><p>用于注解dao层，在daoImpl类上面注解。</p><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><h4 id="1、使用-RequestMapping-来映射-Request-请求与处理器"><a href="#1、使用-RequestMapping-来映射-Request-请求与处理器" class="headerlink" title="1、使用 @RequestMapping 来映射 Request 请求与处理器"></a>1、使用 @RequestMapping 来映射 Request 请求与处理器</h4><p>方式一、通过常见的类路径和方法路径结合访问controller方法</p><p>方式二、使用uri模板</p><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Controller</div><div class="line">@RequestMapping ( &quot;/test/&#123;variable1&#125;&quot; )</div><div class="line">public class MyController &#123;</div><div class="line"></div><div class="line">    @RequestMapping ( &quot;/showView/&#123;variable2&#125;&quot; )</div><div class="line">    public ModelAndView showView( @PathVariable String variable1, @PathVariable ( &quot;variable2&quot; ) int variable2) &#123;</div><div class="line">       ModelAndView modelAndView = new ModelAndView();</div><div class="line">       modelAndView.setViewName( &quot;viewName&quot; );</div><div class="line">       modelAndView.addObject( &quot; 需要放到 model 中的属性名称 &quot; , &quot; 对应的属性值，它是一个对象 &quot; );</div><div class="line">       return modelAndView;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>URI 模板就是在URI 中给定一个变量，然后在映射的时候动态的给该变量赋值。如URI 模板<a href="http://localhost/app/{variable1}/index.html" target="_blank" rel="external">http://localhost/app/{variable1}/index.html</a> ，这个模板里面包含一个变量variable1 ，那么当我们请求<a href="http://localhost/app/hello/index.html" target="_blank" rel="external">http://localhost/app/hello/index.html</a> 的时候，该URL 就跟模板相匹配，只是把模板中的variable1 用hello 来取代。这个变量在SpringMVC 中是使用@PathVariable 来标记的。在SpringMVC 中，我们可以使用@PathVariable 来标记一个Controller 的处理方法参数，表示该参数的值将使用URI 模板中对应的变量的值来赋值。</p><p>代码中我们定义了两个URI 变量，一个是控制器类上的variable1 ，一个是showView 方法上的variable2 ，然后在showView 方法的参数里面使用<strong>@PathVariable</strong> 标记使用了这两个变量。所以当我们使用/test/hello/showView/2.do 来请求的时候就可以访问到MyController 的showView 方法，这个时候variable1 就被赋予值hello ，variable2 就被赋予值2 ，然后我们在showView 方法参数里面标注了参数variable1 和variable2 是来自访问路径的path 变量，这样方法参数variable1 和variable2 就被分别赋予hello 和2 。方法参数variable1 是定义为String 类型，variable2 是定义为int 类型，像这种简单类型在进行赋值的时候Spring 是会帮我们自动转换的。</p><p>   在上面的代码中我们可以看到在标记variable1 为path 变量的时候我们使用的是@PathVariable ，而在标记variable2 的时候使用的是@PathVariable(“variable2”) 。这两者有什么区别呢？第一种情况就默认去URI 模板中找跟参数名相同的变量，但是这种情况只有在使用debug 模式进行编译的时候才可以，而第二种情况是明确规定使用的就是URI 模板中的variable2 变量。当不是使用debug 模式进行编译，或者是所需要使用的变量名跟参数名不相同的时候，就要使用第二种方式明确指出使用的是URI 模板中的哪个变量。</p><p> 除了在请求路径中使用URI 模板，定义变量之外，<strong>@RequestMapping 中还支持通配符“* ”</strong>。如下面的代码我就可以使用/myTest/whatever/wildcard.do 访问到Controller 的testWildcard 方法。如：</p><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Controller</div><div class="line">@RequestMapping ( &quot;/myTest&quot; )</div><div class="line">public class MyController &#123;</div><div class="line">    @RequestMapping ( &quot;*/wildcard&quot; )</div><div class="line">    public String testWildcard() &#123;</div><div class="line">       System. out .println( &quot;wildcard------------&quot; );</div><div class="line">       return &quot;wildcard&quot; ;</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>当@RequestParam中没有指定参数名称时，Spring 在代码是debug 编译的情况下会默认取更方法参数同名的参数，如果不是debug 编译的就会报错。</p><h4 id="2、使用-RequestMapping-的一些高级用法"><a href="#2、使用-RequestMapping-的一些高级用法" class="headerlink" title="2、使用 @RequestMapping 的一些高级用法"></a>2、使用 @RequestMapping 的一些高级用法</h4><p>（1）params属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@RequestMapping (value= &quot;testParams&quot; , params=&#123; &quot;param1=value1&quot; , &quot;param2&quot; , &quot;!param3&quot; &#125;)</div><div class="line">    public String testParams() &#123;</div><div class="line">       System. out .println( &quot;test Params...........&quot; );</div><div class="line">       return &quot;testParams&quot; ;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>用@RequestMapping 的params 属性指定了三个参数，这些参数都是针对请求参数而言的，它们分别表示参数param1 的值必须等于value1 ，参数param2 必须存在，值无所谓，参数param3 必须不存在，只有当请求/testParams.do 并且满足指定的三个参数条件的时候才能访问到该方法。所以当请求/testParams.do?param1=value1&amp;param2=value2 的时候能够正确访问到该testParams 方法，当请求/testParams.do?param1=value1&amp;param2=value2&amp;param3=value3 的时候就不能够正常的访问到该方法，因为在@RequestMapping 的params 参数里面指定了参数param3 是不能存在的。</p><p>（2）method属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@RequestMapping (value= &quot;testMethod&quot; , method=&#123;RequestMethod. GET , RequestMethod. DELETE &#125;)</div><div class="line">    public String testMethod() &#123;</div><div class="line">       return &quot;method&quot; ;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>在上面的代码中就使用method 参数限制了以GET 或DELETE 方法请求/testMethod 的时候才能访问到该Controller 的testMethod 方法。</p><p>（3）headers属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@RequestMapping (value= &quot;testHeaders&quot; , headers=&#123; &quot;host=localhost&quot; , &quot;Accept&quot; &#125;)</div><div class="line">    public String testHeaders() &#123;</div><div class="line">       return &quot;headers&quot; ;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>headers 属性的用法和功能与params 属性相似。在上面的代码中当请求/testHeaders.do 的时候只有当请求头包含Accept 信息，且请求的host 为localhost 的时候才能正确的访问到testHeaders 方法。</p><h3 id="3、-RequestMapping-标记的处理器方法支持的方法参数和返回类型"><a href="#3、-RequestMapping-标记的处理器方法支持的方法参数和返回类型" class="headerlink" title="3、 @RequestMapping 标记的处理器方法支持的方法参数和返回类型"></a>3、 @RequestMapping 标记的处理器方法支持的方法参数和返回类型</h3><h4 id="1-支持的方法参数类型"><a href="#1-支持的方法参数类型" class="headerlink" title="1. 支持的方法参数类型"></a>1. 支持的方法参数类型</h4><p>​         <strong>（1 ）HttpServlet 对象，主要包括HttpServletRequest 、HttpServletResponse 和HttpSession 对象。 </strong>这些参数Spring 在调用处理器方法的时候会自动给它们赋值，所以当在处理器方法中需要使用到这些对象的时候，可以直接在方法上给定一个方法参数的申明，然后在方法体里面直接用就可以了。但是有一点需要注意的是在使用HttpSession 对象的时候，如果此时HttpSession 对象还没有建立起来的话就会有问题。</p><p>   <strong>（2 ）Spring 自己的WebRequest 对象。 </strong>使用该对象可以访问到存放在HttpServletRequest 和HttpSession 中的属性值。</p><p>   <strong>（3 ）InputStream 、OutputStream 、Reader 和Writer 。 </strong>InputStream 和Reader 是针对HttpServletRequest 而言的，可以从里面取数据；OutputStream 和Writer 是针对HttpServletResponse 而言的，可以往里面写数据。</p><p>   <strong>（4 ）使用@PathVariable 、@RequestParam 、@CookieValue 和@RequestHeader 标记的参数。</strong></p><p><strong>   **</strong>（5 ）使用@ModelAttribute 标记的参数。**</p><p><strong>   **</strong>（6 ）java.util.Map 、Spring 封装的Model 和ModelMap 。 **这些都可以用来封装模型数据，用来给视图做展示。</p><p>   <strong>（7 ）实体类。 </strong>可以用来接收上传的参数。</p><p>   <strong>（8 ）Spring 封装的MultipartFile 。 </strong>用来接收上传文件的。</p><p>   <strong>（9 ）Spring 封装的Errors 和BindingResult 对象。 </strong>这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果。</p><h4 id="2-支持的返回类型"><a href="#2-支持的返回类型" class="headerlink" title="2. 支持的返回类型"></a>2. 支持的返回类型</h4><p>   （1 ）一个包含模型和视图的ModelAndView 对象。</p><p>   （2 ）一个模型对象，这主要包括Spring 封装好的Model 和ModelMap ，以及java.util.Map ，当没有视图返回的时候视图名称将由RequestToViewNameTranslator 来决定。</p><p>   （3 ）一个View 对象。这个时候如果在渲染视图的过程中模型的话就可以给处理器方法定义一个模型参数，然后在方法体里面往模型中添加值。</p><p>   （4 ）一个String 字符串。这往往代表的是一个视图名称。这个时候如果需要在渲染视图的过程中需要模型的话就可以给处理器方法一个模型参数，然后在方法体里面往模型中添加值就可以了。</p><p>   （5 ）返回值是void 。这种情况一般是我们直接把返回结果写到HttpServletResponse 中了，如果没有写的话，那么Spring 将会利用RequestToViewNameTranslator 来返回一个对应的视图名称。如果视图中需要模型的话，处理方法与返回字符串的情况相同。</p><p>   （6 ）如果处理器方法被注解@ResponseBody 标记的话，那么处理器方法的任何返回类型都会通过HttpMessageConverters 转换之后写到HttpServletResponse 中，而不会像上面的那些情况一样当做视图或者模型来处理。</p><p>   （7 ）除以上几种情况之外的其他任何返回类型都会被当做模型中的一个属性来处理，而返回的视图还是由RequestToViewNameTranslator 来决定，添加到模型中的属性名称可以在该方法上用@ModelAttribute(“attributeName”) 来定义，否则将使用返回类型的类名称的首字母小写形式来表示。使用@ModelAttribute 标记的方法会在@RequestMapping 标记的方法执行之前执行。</p><h3 id="4、使用-ModelAttribute-和-SessionAttributes-传递和保存数据"><a href="#4、使用-ModelAttribute-和-SessionAttributes-传递和保存数据" class="headerlink" title="4、使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据"></a>4、使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</h3><p>SpringMVC 支持使用 @<strong>ModelAttribute</strong> 和 @<strong>SessionAttributes</strong> 在不同的模型（model）和控制器之间共享数据。 <strong>@ModelAttribute </strong>主要有两种使用方式，一种是标注在方法上，一种是标注在 Controller 方法参数上。</p><p>当 @<strong>ModelAttribute</strong> 标记在方法上的时候，该方法将在处理器方法执行之前执行，然后把返回的对象存放在 session 或模型属性中，属性名称可以使用 @<strong>ModelAttribute</strong>(“attributeName”) 在标记方法的时候指定，若未指定，则使用返回类型的类名称（首字母小写）作为属性名称。关于 @ModelAttribute 标记在方法上时对应的属性是存放在 session 中还是存放在模型中，我们来做一个实验，看下面一段代码。</p><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@Controller</div><div class="line">@RequestMapping ( &quot;/myTest&quot; )</div><div class="line">public class MyController &#123;</div><div class="line"></div><div class="line">    @ModelAttribute ( &quot;hello&quot; )</div><div class="line">    public String getModel() &#123;</div><div class="line">       System. out .println( &quot;-------------Hello---------&quot; );</div><div class="line">       return &quot;world&quot; ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ModelAttribute ( &quot;intValue&quot; )</div><div class="line">    public int getInteger() &#123;</div><div class="line">       System. out .println( &quot;-------------intValue---------------&quot; );</div><div class="line">       return 10;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @RequestMapping ( &quot;sayHello&quot; )</div><div class="line">    public void sayHello( @ModelAttribute ( &quot;hello&quot; ) String hello, @ModelAttribute ( &quot;intValue&quot; ) int num, @ModelAttribute ( &quot;user2&quot; ) User user, Writer writer, HttpSession session) throws IOException &#123;</div><div class="line">       writer.write( &quot;Hello &quot; + hello + &quot; , Hello &quot; + user.getUsername() + num);</div><div class="line">       writer.write( &quot;\r&quot; );</div><div class="line">       Enumeration enume = session.getAttributeNames();</div><div class="line">       while (enume.hasMoreElements())</div><div class="line">           writer.write(enume.nextElement() + &quot;\r&quot; );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ModelAttribute ( &quot;user2&quot; )</div><div class="line">    public User getUser()&#123;</div><div class="line">       System. out .println( &quot;---------getUser-------------&quot; );</div><div class="line">       return new User(3, &quot;user2&quot; );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>当我们请求 /myTest/sayHello.do 的时候使用 @ModelAttribute 标记的方法会先执行，然后把它们返回的对象存放到模型中。最终访问到 sayHello 方法的时候，使用 @ModelAttribute 标记的方法参数都能被正确的注入值。执行结果如下所示：</p><ul><li>Hello world,Hello user210*</li></ul><p>​       由执行结果我们可以看出来，此时 session 中没有包含任何属性，也就是说上面的那些对象都是存放在模型属性中，而不是存放在 session 属性中。那要如何才能存放在 session 属性中呢？这个时候我们先引入一个新的概念 @SessionAttributes ，它的用法会在讲完 @ModelAttribute 之后介绍，这里我们就先拿来用一下。我们在 MyController 类上加上 @SessionAttributes 属性标记哪些是需要存放到 session 中的。看下面的代码：</p><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">@Controller</div><div class="line">@RequestMapping ( &quot;/myTest&quot; )</div><div class="line">@SessionAttributes (value=&#123; &quot;intValue&quot; , &quot;stringValue&quot; &#125;, types=&#123;User. class &#125;)</div><div class="line">public class MyController &#123;</div><div class="line"></div><div class="line">    @ModelAttribute ( &quot;hello&quot; )</div><div class="line">    public String getModel() &#123;</div><div class="line">       System. out .println( &quot;-------------Hello---------&quot; );</div><div class="line">       return &quot;world&quot; ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ModelAttribute ( &quot;intValue&quot; )</div><div class="line">    public int getInteger() &#123;</div><div class="line">       System. out .println( &quot;-------------intValue---------------&quot; );</div><div class="line">       return 10;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    @RequestMapping ( &quot;sayHello&quot; )</div><div class="line">    public void sayHello(Map&lt;String, Object&gt; map, @ModelAttribute ( &quot;hello&quot; ) String hello, @ModelAttribute ( &quot;intValue&quot; ) int num, @ModelAttribute ( &quot;user2&quot; ) User user, Writer writer, HttpServletRequest request) throws IOException &#123;</div><div class="line">       map.put( &quot;stringValue&quot; , &quot;String&quot; );</div><div class="line">       writer.write( &quot;Hello &quot; + hello + &quot; , Hello &quot; + user.getUsername() + num);</div><div class="line">       writer.write( &quot;\r&quot; );</div><div class="line">       HttpSession session = request.getSession();</div><div class="line">       Enumeration enume = session.getAttributeNames();</div><div class="line">       while (enume.hasMoreElements())</div><div class="line">           writer.write(enume.nextElement() + &quot;\r&quot; );</div><div class="line">       System. out .println(session);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ModelAttribute ( &quot;user2&quot; )</div><div class="line">    public User getUser() &#123;</div><div class="line">       System. out .println( &quot;---------getUser-------------&quot; );</div><div class="line">       return new User(3, &quot;user2&quot; );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>在上面代码中我们指定了属性为 intValue 或 stringValue 或者类型为 User 的都会放到 Session中，利用上面的代码当我们访问 /myTest/sayHello.do 的时候，结果如下：</p><ul><li>Hello world,Hello user210*</li></ul><p>仍然没有打印出任何 session 属性，这是怎么回事呢？怎么定义了把模型中属性名为 intValue 的对象和类型为 User 的对象存到 session 中，而实际上没有加进去呢？难道我们错啦？我们当然没有错，只是在第一次访问 /myTest/sayHello.do 的时候 @SessionAttributes 定义了需要存放到 session 中的属性，而且这个模型中也有对应的属性，但是这个时候还没有加到 session 中，所以 session 中不会有任何属性，等处理器方法执行完成后 Spring 才会把模型中对应的属性添加到 session 中。所以当请求第二次的时候就会出现如下结果：</p><ul><li>Hello world,Hello user210*</li></ul><p><em>user2</em></p><p><em>intValue</em></p><p><em>stringValue</em></p><p>当 @ModelAttribute 标记在处理器方法参数上的时候，表示该参数的值将从模型或者 Session 中取对应名称的属性值，该名称可以通过 @ModelAttribute(“attributeName”) 来指定，若未指定，则使用参数类型的类名称（首字母小写）作为属性名称。</p><h3 id="5、-PathVariable和-RequestParam的区别"><a href="#5、-PathVariable和-RequestParam的区别" class="headerlink" title="5、@PathVariable和@RequestParam的区别"></a>5、@PathVariable和@RequestParam的区别</h3><p>请求路径上有个id的变量值，可以通过@PathVariable来获取  @RequestMapping(value = “/page/{id}”, method = RequestMethod.GET)<br>@RequestParam用来获得静态的URL请求入参     spring注解时action里用到。</p><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p>handler method 参数绑定常用的注解,我们根据他们处理的Request的不同内容部分分为四类：（主要讲解常用类型）</p><p>A、处理<strong>requet uri </strong>部分（这里指uri template中variable，不含queryString部分）的注解：   @PathVariable;</p><p>B、处理<strong>request header</strong>部分的注解：   @RequestHeader, @CookieValue;</p><p>C、处理<strong>request body</strong>部分的注解：@RequestParam,  @RequestBody;</p><p>D、处理<strong>attribute</strong>类型是注解： @SessionAttributes, @ModelAttribute;</p><h4 id="（1）、-PathVariable"><a href="#（1）、-PathVariable" class="headerlink" title="（1）、@PathVariable"></a>（1）、@PathVariable</h4><p>当使用@RequestMapping URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。</p><p>示例代码：</p><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Controller  </div><div class="line">@RequestMapping(&quot;/owners/&#123;ownerId&#125;&quot;)  </div><div class="line">public class RelativePathUriTemplateController &#123;  </div><div class="line">  </div><div class="line">  @RequestMapping(&quot;/pets/&#123;petId&#125;&quot;)  </div><div class="line">  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) &#123;      </div><div class="line">    // implementation omitted   </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>上面代码把URI template 中变量 ownerId的值和petId的值，绑定到方法的参数上。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(“name”)指定uri template中的名称。</p><h4 id="（2）、-RequestHeader、-CookieValue"><a href="#（2）、-RequestHeader、-CookieValue" class="headerlink" title="（2）、 @RequestHeader、@CookieValue"></a>（2）、 @RequestHeader、@CookieValue</h4><p>@RequestHeader 注解，可以把Request请求header部分的值绑定到方法的参数上。</p><p>示例代码：</p><p>这是一个Request 的header部分：</p><ol><li>Host                    localhost:8080  </li><li>Accept                  text/html,application/xhtml+xml,application/xml;q=0.9  </li><li>Accept-Language         fr,en-gb;q=0.7,en;q=0.3  </li><li>Accept-Encoding         gzip,deflate  </li><li>Accept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7  </li><li>Keep-Alive              300  </li></ol><ol><li>@RequestMapping(“/displayHeaderInfo.do”)  </li></ol><ol><li><strong>public</strong> <strong>void</strong> displayHeaderInfo(@RequestHeader(“Accept-Encoding”) String encoding,  </li><li>​                              @RequestHeader(“Keep-Alive”) <strong>long</strong> keepAlive)  {  </li><li>}  </li></ol><p>上面的代码，把request header部分的 Accept-Encoding的值，绑定到参数encoding上了， Keep-Alive header的值绑定到参数keepAlive上。</p><p>@CookieValue 可以把Request header中关于cookie的值绑定到方法的参数上。</p><p>例如有如下Cookie值：</p><p>　　JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(&quot;/displayHeaderInfo.do&quot;)  </div><div class="line">public void displayHeaderInfo(@CookieValue(&quot;JSESSIONID&quot;) String cookie)  &#123;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>即把JSESSIONID的值绑定到参数cookie上。</p><h4 id="（3）、-RequestParam-RequestBody"><a href="#（3）、-RequestParam-RequestBody" class="headerlink" title="（3）、@RequestParam, @RequestBody"></a>（3）、@RequestParam, @RequestBody</h4><p>@RequestParam </p><p>A） 常用来处理简单类型的绑定，<strong>通过Request.getParameter() 获取的String可直接转换为简单类型的情况</strong>（ String–&gt; 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理<strong>get 方式中queryString的值</strong>，也可以处理<strong>post方式中 body data的值</strong>；</p><p>B）用来处理Content-Type: 为 <code>application/x-www-form-urlencoded</code>编码的内容，提交方式GET、POST；</p><p>C) 该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定；</p><p>示例代码：</p><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Controller  </div><div class="line">@RequestMapping(&quot;/pets&quot;)  </div><div class="line">@SessionAttributes(&quot;pet&quot;)  </div><div class="line">public class EditPetForm &#123;  </div><div class="line">    @RequestMapping(method = RequestMethod.GET)  </div><div class="line"> public String setupForm(@RequestParam(&quot;petId&quot;) int petId, ModelMap model) &#123;  </div><div class="line">       Pet pet = this.clinic.loadPet(petId);  </div><div class="line">   model.addAttribute(&quot;pet&quot;, pet);  </div><div class="line">   return &quot;petForm&quot;;  </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="external"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>@RequestBody</p><p>该注解常用来处理Content-Type: 不是<code>application/x-www-form-urlencoded</code>编码的内容，例如application/json, application/xml等；</p><p>它是通过使用HandlerAdapter 配置的<code>HttpMessageConverters</code>来解析post data body，然后绑定到相应的bean上的。</p><p>因为配置有FormHttpMessageConverter，所以也可以用来处理 <code>application/x-www-form-urlencoded</code>的内容，处理完的结果放在一个MultiValueMap<string, string="">里，这种情况在某些特殊需求下使用，详情查看FormHttpMessageConverter api;</string,></p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/something&quot;, method = RequestMethod.PUT)  </div><div class="line">public void handle(@RequestBody String body, Writer writer) throws IOException &#123;  </div><div class="line">  writer.write(body);  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="（4）、-SessionAttributes-ModelAttribute"><a href="#（4）、-SessionAttributes-ModelAttribute" class="headerlink" title="（4）、@SessionAttributes, @ModelAttribute"></a>（4）、@SessionAttributes, @ModelAttribute</h4><p>@SessionAttributes:</p><p>该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。</p><p>该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Controller  </div><div class="line">@RequestMapping(&quot;/editPet.do&quot;)  </div><div class="line">@SessionAttributes(&quot;pet&quot;)  </div><div class="line">public class EditPetForm &#123;  </div><div class="line">    // ...   </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>@ModelAttribute</p><p>该注解有两个用法，一个是用于方法上，一个是用于参数上；</p><p>用于方法上时：  通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；</p><p>用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：</p><p>A） @SessionAttributes 启用的attribute 对象上；</p><p>B） @ModelAttribute 用于方法上时指定的model对象；</p><p>C） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。</p><p>用到方法上@ModelAttribute的示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@ModelAttribute  </div><div class="line">public Account addAccount(@RequestParam String number) &#123;  </div><div class="line">    return accountManager.findAccount(number);  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种方式实际的效果就是在调用@RequestMapping的方法之前，为request对象的model里put（“account”， Account）。</p><p>用在参数上的@ModelAttribute示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value=&quot;/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit&quot;, method = RequestMethod.POST)  </div><div class="line">public String processSubmit(@ModelAttribute Pet pet) &#123;  </div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>首先查询 @SessionAttributes有无绑定的Pet对象，若没有则查询@ModelAttribute方法层面上是否绑定了Pet对象，若没有则将URI template中的值按对应的名称绑定到Pet对象的各属性上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6、&lt; context:component-scan base-package = &quot;&quot; /&gt;浅析</div></pre></td></tr></table></figure><p>component-scan 默认扫描的注解类型是 @Component，不过，在 @Component 语义基础上细化后的 @Repository, @Service 和 @Controller 也同样可以获得 component-scan 的青睐</p><p>有了<context:component-scan>，另一个<context:annotation-config>标签根本可以移除掉，因为已经被包含进去了</context:annotation-config></context:component-scan></p><p>另外<context:annotation-config>还提供了两个子标签</context:annotation-config></p><ol><li><p><context:include-filter> //指定扫描的路径</context:include-filter></p></li><li><p><context:exclude-filter> //排除扫描的路径</context:exclude-filter></p></li></ol><p><context:component-scan>有一个use-default-filters属性，属性默认为true,表示会扫描指定包下的全部的标有@Component的类，并注册成bean.也就是@Component的子注解@Service,@Reposity等。</context:component-scan></p><p>这种扫描的粒度有点太大，如果你只想扫描指定包下面的Controller或其他内容则设置use-default-filters属性为false，表示不再按照scan指定的包扫描，而是按照<context:include-filter>指定的包扫描，示例：</context:include-filter></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;context:component-scan base-package=&quot;com.tan&quot; use-default-filters=&quot;false&quot;&gt;</div><div class="line">        &lt;context:include-filter type=&quot;regex&quot; expression=&quot;com.tan.*&quot;/&gt;//注意后面要写.*</div><div class="line">&lt;/context:component-scan&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">当没有设置use-default-filters属性或者属性为true时，表示基于base-packge包下指定扫描的具体路径</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;context:component-scan base-package=&quot;com.tan&quot; &gt;</div><div class="line">        &lt;context:include-filter type=&quot;regex&quot; expression=&quot;.controller.*&quot;/&gt;</div><div class="line">        &lt;context:include-filter type=&quot;regex&quot; expression=&quot;.service.*&quot;/&gt;</div><div class="line">        &lt;context:include-filter type=&quot;regex&quot; expression=&quot;.dao.*&quot;/&gt;</div><div class="line">&lt;/context:component-scan&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">效果相当于：</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;context:component-scan base-package=&quot;com.tan&quot; &gt;</div><div class="line">        &lt;context:exclude-filter type=&quot;regex&quot; expression=&quot;.model.*&quot;/&gt;</div><div class="line">&lt;/context:component-scan&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">注意：本人尝试时无论哪种情况&lt;context:include-filter&gt;和&lt;context:exclude-filter&gt;都不能同时存在</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;springmvc常用注解标签详解&quot;&gt;&lt;a href=&quot;#springmvc常用注解标签详解&quot; class=&quot;headerlink&quot; title=&quot;springmvc常用注解标签详解&quot;&gt;&lt;/a&gt;springmvc常用注解标签详解&lt;/h1&gt;&lt;h2 id=&quot;1、-Controller&quot;&gt;&lt;a href=&quot;#1、-Controller&quot; class=&quot;headerlink&quot; title=&quot;1、@Controller&quot;&gt;&lt;/a&gt;1、@Controller&lt;/h2&gt;
    
    </summary>
    
      <category term="筆記" scheme="http://yoursite.com/categories/%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Friday</title>
    <link href="http://yoursite.com/2017/10/13/2017-10-13Friday/"/>
    <id>http://yoursite.com/2017/10/13/2017-10-13Friday/</id>
    <published>2017-10-13T06:35:36.000Z</published>
    <updated>2017-10-16T03:02:13.973Z</updated>
    
    <content type="html"><![CDATA[<h5 id="嘻嘻"><a href="#嘻嘻" class="headerlink" title="嘻嘻"></a>嘻嘻</h5><a id="more"></a><p>有了博客之后就可以隔断时间记录一下心情或者心得 标签怎么分咧 </p><p>心得是学习后自己的总结 笔记是别人的总结 随笔就是日记吧 还有什么再补充就好了</p><p>但随笔要设密码诶 不然都被你们看到了 但好像github可以看源代码诶 那就有点傻了</p><h5 id="一眨眼就过了两个月了"><a href="#一眨眼就过了两个月了" class="headerlink" title="一眨眼就过了两个月了"></a>一眨眼就过了两个月了</h5><p>前端学了thymeleaf vue.js react js jquery ajax 但都只是单纯的会 才做了一个项目 感觉很多东西还不够熟练 接下去要往后端走了</p><blockquote><p>博客搭好了</p></blockquote><p>接下来的目标</p><ul><li style="list-style: none"><input type="checkbox"> springboot </li><li style="list-style: none"><input type="checkbox"> redis</li><li style="list-style: none"><input type="checkbox"> docker</li><li style="list-style: none"><input type="checkbox"> Nginx </li><li style="list-style: none"><input type="checkbox"> 搭一个用springboot+mybaits或者hibernate的项目</li><li style="list-style: none"><input type="checkbox"> 改一个restful风格的项目</li></ul><p>会不会有点多 感觉越进去越多东西学 还想学C语言 还要学matlab学数值计算 烦死我啦</p><h5 id="想想有什么是好玩的想自己搞的"><a href="#想想有什么是好玩的想自己搞的" class="headerlink" title="想想有什么是好玩的想自己搞的"></a>想想有什么是好玩的想自己搞的</h5><ul><li><p>之前自制的浏览器页面还需要美化一下</p></li><li><p>搭一个系统 可以记录一些用户名密码等 或者单纯记录</p><p>​</p></li></ul><h5 id="没啦-么么哒"><a href="#没啦-么么哒" class="headerlink" title="没啦 么么哒"></a>没啦 么么哒</h5>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;嘻嘻&quot;&gt;&lt;a href=&quot;#嘻嘻&quot; class=&quot;headerlink&quot; title=&quot;嘻嘻&quot;&gt;&lt;/a&gt;嘻嘻&lt;/h5&gt;
    
    </summary>
    
      <category term="日記" scheme="http://yoursite.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
      <category term="隨筆" scheme="http://yoursite.com/tags/%E9%9A%A8%E7%AD%86/"/>
    
  </entry>
  
  <entry>
    <title>Git上传</title>
    <link href="http://yoursite.com/2017/10/13/2017-10-13Git%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yoursite.com/2017/10/13/2017-10-13Git上传/</id>
    <published>2017-10-13T06:09:57.000Z</published>
    <updated>2017-10-17T03:45:28.621Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>怎样上传代码</p></blockquote><h5 id="第一步：建立git仓库"><a href="#第一步：建立git仓库" class="headerlink" title="第一步：建立git仓库"></a><strong>第一步：建立git仓库</strong></h5><p>cd到你的本地项目根目录下，执行git命令</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure><p><strong>第二步：将项目的所有文件添加到仓库中</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure><p><strong>如果想添加某个特定的文件，只需把.换成特定的文件名即可</strong></p><p><strong>第三步：将add的文件commit到仓库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;注释语句&quot;</div></pre></td></tr></table></figure><hr><p><strong>第四步：去github上创建自己的Repository，创建页面如下图所示：</strong> </p><p><strong>点击下面的Create repository，就会进入到类似下面的一个页面，拿到创建的仓库的https地址，红框标示的就是</strong> </p><p><strong>第五步：重点来了，将本地的仓库关联到github上</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/hanhailong/CustomRatingBar</div></pre></td></tr></table></figure><p><strong>后面的https链接地址换成你自己的仓库url地址，也就是上面红框中标出来的地址</strong></p><p><strong>第六步：上传github之前，要先pull一下，执行如下命令：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master</div></pre></td></tr></table></figure><p><strong>第七步，也就是最后一步，上传代码到github远程仓库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure><p><strong>执行完后，如果没有异常，等待执行完就上传成功了，中间可能会让你输入Username和Password，你只要输入github的账号和密码就行了</strong></p><blockquote><h4 id="如何把你对自己项目的改动，给发到之前fork的那个原项目"><a href="#如何把你对自己项目的改动，给发到之前fork的那个原项目" class="headerlink" title="如何把你对自己项目的改动，给发到之前fork的那个原项目"></a>如何把你对自己项目的改动，给发到之前fork的那个原项目</h4></blockquote><p><strong>pull request</strong></p><blockquote><p>自己fork的项目怎么做到和原项目同步</p></blockquote><p>你先git clone我的代码到本地，然后修修改改，然后你不是不能push到我的项目里么，你可以先在github页面上fork我的项目，有了你自己的项目地址（url）之后呢，</p><p>你在本地操作git remote add [sort name] [your url]，意思就是添加第二个远程仓库地址，这个仓库的“昵称”就是你刚指定的[sort name]，</p><p>你之后push文件呢 就通过指定这个［sort name］来push到这个你自己的仓库里</p><p>等你觉得想要把你改的发给原项目同步，就在你的项目上点Pull request按钮.说下另一种情况，</p><p>如果是原项目发生了改动，你要想同步到本地，就直接从git fetch origin 从原项目的地址同步代码，然后再merge就好了</p><p>当然，你可以通过新建分支的方式往自己的项目上push，这样同步的时候直接fetch就行了。</p><h4 id="今天使用git-添加远程github仓库的时候提示错误：fatal-remote-origin-already-exists"><a href="#今天使用git-添加远程github仓库的时候提示错误：fatal-remote-origin-already-exists" class="headerlink" title="今天使用git 添加远程github仓库的时候提示错误：fatal: remote origin already exists."></a>今天使用git 添加远程github仓库的时候提示错误：fatal: remote origin already exists.</h4><p>1、先删除远程 Git 仓库<br>$ git init<br>$ git add .<br>$ git commit -m “”<br>$ git remote rm origin<br>$ git remote add origin git@github.com:FBing/java-code-generator<br>$ git pull origin master —-allow-unrelated-histories<br>$ git pull origin master<br>$ git push -u origin master</p><h4 id="時間穿梭"><a href="#時間穿梭" class="headerlink" title="時間穿梭"></a>時間穿梭</h4><h5 id="刪除文件"><a href="#刪除文件" class="headerlink" title="刪除文件"></a>刪除文件</h5><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- test.txt</div></pre></td></tr></table></figure><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong></p><h4 id="遠程倉庫"><a href="#遠程倉庫" class="headerlink" title="遠程倉庫"></a>遠程倉庫</h4><h5 id="添加到遠程庫"><a href="#添加到遠程庫" class="headerlink" title="添加到遠程庫"></a>添加到遠程庫</h5><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步。</p><hr><h5 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">创建版本库</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init  #初始化所在目录为Git仓库</div></pre></td></tr></table></figure><blockquote><p>初始化的目录可以不为空</p></blockquote><h5 id="添加文件到版本库"><a href="#添加文件到版本库" class="headerlink" title="添加文件到版本库"></a>添加文件到版本库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add &lt;file&gt; ...  #添加文件到暂存区（stage）</div><div class="line">        -f &lt;file&gt; ...  #强制添加到暂存区（可用于添加忽略文件）</div><div class="line">git commit -m &quot;提交说明&quot;  #从暂存区提交到版本库</div></pre></td></tr></table></figure><blockquote><p>git add 命令可多次执行，然后commit一次。</p></blockquote><h5 id="時光機穿梭"><a href="#時光機穿梭" class="headerlink" title="時光機穿梭"></a>時光機穿梭</h5><ul><li><h6 id="查看状态、差异"><a href="#查看状态、差异" class="headerlink" title="查看状态、差异"></a>查看状态、差异</h6></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git status  #查看仓库当前状态</div><div class="line">git diff [file]  #比较工作区和暂存区的差异</div><div class="line">git diff --cached [file]  #比较暂存区和版本库的差异</div><div class="line">git diff HEAD -- [file]  #比较工作区和版本库的差异</div></pre></td></tr></table></figure><ul><li><h6 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h6></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git log  #查看提交历史</div><div class="line">git log -1  #查看最后一次提交信息（-2 则是最后两次）</div><div class="line">git log --pretty=oneline  #单行格式显示提交历史</div><div class="line">        --graph  #显示分支合并图</div><div class="line">        --abbrev-commit  #简写的commit_id</div><div class="line">git reflog  #查看所有操作记录，包括删除的commit记录</div><div class="line">git reset --hard HEAD^  #回退到上一版本</div><div class="line"># HEAD 表当前版本， HEAD^ 表上一版本，HEAD^^ 表上两版本，HEAD~99 表上99版本。</div><div class="line">git reset --hard commit_id  #切换到指定版本</div></pre></td></tr></table></figure><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul><blockquote><p>Git跟踪管理的是修改，而非文件</p></blockquote><ul><li><h6 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h6></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout -- &lt;file&gt;  #撤销工作区的修改</div><div class="line">git reset HEAD &lt;file&gt;  #撤销暂存区的修改</div></pre></td></tr></table></figure><blockquote><p>若已commit但没提交到远程库，可用版本回退进行撤销</p><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000" target="_blank" rel="external">版本回退</a>一节，不过前提是没有推送到远程库。</p></blockquote><ul><li><h6 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h6><ul><li>方法一：工作区删除文件，然后正常提交</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm &lt;file&gt; ...  #工作区删除</div><div class="line">git add &lt;file&gt; ...  #将修改提交至暂存区</div><div class="line">git commit -m &quot;说明&quot;  #提交到版本库</div></pre></td></tr></table></figure><ul><li>方法二：直接命令删除工作区和暂存区，然后提交版本库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git rm &lt;file&gt; ...  #删除工作区和暂存区文件</div><div class="line">git commit -m &quot;说明&quot;  #提交到版本库</div></pre></td></tr></table></figure></li></ul><blockquote><p>删除、增加文件也都属于修改</p><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; $ git checkout -- test.txt</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong></p></blockquote><h5 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h5><ul><li><h6 id="创建SSH-Key"><a href="#创建SSH-Key" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h6></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;  #生成的Key在家目录.ssh文件夹里面，pub后缀是公钥，另一个是私钥。</div></pre></td></tr></table></figure><ul><li><h6 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h6></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@server-name:path/repo-name.git  #添加远程仓库</div><div class="line">git remote  #查看远程库信息</div><div class="line">           -v  #显示详细信息</div><div class="line">git push -u origin &lt;branch&gt;  #推送并关联指定分支到远程库</div></pre></td></tr></table></figure><blockquote><p>除第一次关联，之后push不用加-u选项</p></blockquote><ul><li><h6 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h6></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone git@server-name:path/repo-name.git  #将远程仓库克隆到当前目录</div><div class="line">git pull  #拉取远程仓库内容</div></pre></td></tr></table></figure><h6 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">git branch &lt;branch&gt;  #创建分支</div><div class="line">git checkout &lt;branch&gt;  #切换到指定分支</div><div class="line">git checkout -b &lt;branch&gt;  #创建并切换到该分支</div><div class="line">git branch  #查看现有分支</div><div class="line">git branch -d &lt;branch&gt;  #删除指定分支</div><div class="line">git branch --set-upstream &lt;branch_local&gt; &lt;branch_remote&gt;  #指定本地分支与远程分支的链接</div><div class="line">git merge &lt;branch&gt;  #合并指定分支到当前分支</div><div class="line">          --no-ff &lt;branch&gt;  #禁用快速合并</div><div class="line">git merge --no-ff -m &quot;提交说明&quot; &lt;branch&gt;  #普通方式合并，并附提交说明</div><div class="line">git stash  #保存当前工作环境（包括工作区和暂存区）</div><div class="line">git stash list  #查看保存的工作列表</div><div class="line">git stash apply [stash@&#123;X&#125;]  #恢复工作状态，但不删除stash内容</div><div class="line">git stash pop [stash@&#123;X&#125;]  #恢复工作状态，并删除stash内容</div><div class="line">git stash drop [stash@&#123;X&#125;]  #删除stash内容</div><div class="line">git branch -D &lt;branch&gt;  #强制删除分支（常用于未合并的分支）</div></pre></td></tr></table></figure><blockquote><p>HEAD不是直接指向提交点，而是指向分支，分支再指向提交点</p></blockquote><ul><li><h6 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h6></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">##error: failed to push some refs to ...</div><div class="line">1. git pull 远程库</div><div class="line">2. 解决冲突（若有），再push</div></pre></td></tr></table></figure><ul><li>分支管理策略图</li></ul><p><a href="https://camo.githubusercontent.com/64ee45ca6222cfce64ec679d18b0c9e6ab0862d0/687474703a2f2f7777772e6c69616f78756566656e672e636f6d2f66696c65732f6174746163686d656e74732f30303133383439303932333933393064333535656230376439643634333035623633323261616634656461633165333030302f30" target="_blank" rel="external"><img src="https://camo.githubusercontent.com/64ee45ca6222cfce64ec679d18b0c9e6ab0862d0/687474703a2f2f7777772e6c69616f78756566656e672e636f6d2f66696c65732f6174746163686d656e74732f30303133383439303932333933393064333535656230376439643634333035623633323261616634656461633165333030302f30" alt="image"></a></p><h5 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git tag  #查看现有标签</div><div class="line">git tag &lt;tag_name&gt;  #给当前所在的commit打标签</div><div class="line">git tag &lt;tag_name&gt; &lt;commit_id&gt;  #给指定commit打标签</div><div class="line">git tag -a &lt;tag_name&gt; -m &quot;标签说明&quot; &lt;commit_id&gt;  #给指定commit打标签，并附说明</div><div class="line">        -s &lt;tag_name&gt; -m &quot;标签说明&quot; &lt;commit_id&gt;  #用gpg私钥签名</div><div class="line">        -d &lt;tag_name&gt;  #删除标签</div><div class="line">git show &lt;tag_name&gt;  #显示标签信息</div><div class="line">git push origin &lt;tag_name&gt;  #推送标签到远程库</div><div class="line">git push origin --tags  #推送所有未推送的标签到远程库</div><div class="line">git push origin :refs/tags/&lt;tag_name&gt;  #删除远程标签（先删除本地，再使用该命令删除）</div></pre></td></tr></table></figure><h5 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;you_name&quot;  #设置全局用户名</div><div class="line">git config --global user.email &quot;email@example.com&quot;  #设置全局邮箱</div><div class="line">git config --global color.ui true  #设置全局颜色显示</div><div class="line">git config --global alias.&lt;alias_name&gt; &lt;&apos;command_name&apos;&gt;  #设置别名</div></pre></td></tr></table></figure><ul><li><p>忽略特殊文件</p><ol><li>工作区创建<code>.gitignore</code>文件</li><li>内容举例，如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#Windows:</div><div class="line">Thumbs.db</div><div class="line">ehthumbs.db</div><div class="line">Desktop.ini</div><div class="line"></div><div class="line">#Python:</div><div class="line">*.py[cod]</div><div class="line">*.so</div><div class="line">*.egg</div><div class="line">*.egg-info</div><div class="line">dist</div><div class="line">build</div><div class="line">#My configurations:</div><div class="line">db.ini</div><div class="line">deploy_key_rsa</div></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git check-ignore -v &lt;file&gt;  #查看忽略该文件的规则</div></pre></td></tr></table></figure><blockquote><p>规则有错时常用上述命令查找定位</p></blockquote><ul><li>配置别名列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">配置别名列表</div><div class="line">git config --global alias.confg &apos;config --global&apos;</div><div class="line">git confg alias.st status</div><div class="line">git confg alias.co checkout</div><div class="line">git confg alias.ci commit</div><div class="line">git confg alias.br branch</div><div class="line">git confg alias.unstage &apos;reset HEAD&apos;</div><div class="line">git confg alias.last &apos;log -1&apos;</div><div class="line">git confg alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;怎样上传代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;第一步：建立git仓库&quot;&gt;&lt;a href=&quot;#第一步：建立git仓库&quot; class=&quot;headerlink&quot; title=&quot;第一步：建立git仓库&quot;&gt;&lt;/a&gt;&lt;strong&gt;第一步：建立git仓库&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;cd到你的本地项目根目录下，执行git命令&lt;/p&gt;
    
    </summary>
    
      <category term="筆記" scheme="http://yoursite.com/categories/%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="http://yoursite.com/2017/10/12/2017-10-12React/"/>
    <id>http://yoursite.com/2017/10/12/2017-10-12React/</id>
    <published>2017-10-12T05:53:57.000Z</published>
    <updated>2017-10-16T03:01:45.360Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近学了react </p></blockquote><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a><strong>好处</strong></h3><ul><li>自定义标签</li><li>结构清晰</li><li>代码模块化</li><li>更加语义化</li></ul><a id="more"></a><h3 id="不过也有缺点"><a href="#不过也有缺点" class="headerlink" title="不过也有缺点"></a><strong>不过也有缺点</strong></h3><ul><li>浏览器不支持这语法</li><li>必须通过一大堆工具来转换</li></ul><h3 id="一些需要注意的点"><a href="#一些需要注意的点" class="headerlink" title="一些需要注意的点"></a>一些需要注意的点</h3><p><strong>1. react声明组件时，组件名称必须以大写字母开头如</strong>👉：<code>&lt;Todo /&gt;</code><br><strong>2. 每个标签必须闭合,因为采用的 js+xml 写法，如</strong>👉: <code>&lt;input /&gt;</code><br><strong>3. 组件的返回值只能有一个顶层元素，如</strong>👇：</p><p>下面是错误的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">render () &#123;</div><div class="line">  return (</div><div class="line">    &lt;div&gt;1&lt;/div&gt;</div><div class="line">    &lt;div&gt;2&lt;/div&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>必须这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">render () &#123;</div><div class="line">  return (</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;div&gt;1&lt;/div&gt;</div><div class="line">        &lt;div&gt;2&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>4. return后面要加一个括号,目的是防止 JavaScript 代码在解析时自动在换行处添加分号</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> renderSquare(i) &#123;</div><div class="line">        return (</div><div class="line">          &lt;Todo /&gt;</div><div class="line">        );</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>5. render()里面不能写 class,for,而是要写成className和htmlFor,因为 class ，for 是 javascript 的关键字，因此不能使用，如</strong>：</p><p>下面是错误的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=“xxx”&gt;</div></pre></td></tr></table></figure><p>而是要写 className：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div className=&quot;xxx&quot;&gt;</div></pre></td></tr></table></figure><p><strong>6. 不要直接更新状态，如</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.state.comment = &apos;Hello&apos;;</div></pre></td></tr></table></figure><p>此代码<strong>不会</strong>重新渲染组件的，之前就这么写，啥反应也没有😂，应该要用<code>setState()</code>:👇</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.setState(&#123;comment: &apos;Hello&apos;&#125;);</div></pre></td></tr></table></figure><p>（<strong>注意！！</strong>：构造函数（constructor）是唯一能够初始化 this.state 的地方。）</p><p><strong>7. 使用style</strong></p><p>我们在 html 可以这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;background-color:red;&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure><p>但是在 jsx 里面却不能这么写，必须用两个花括号包裹，并且里面不能写<code>-</code>，要用驼峰形式写，如上面的 <code>background-color</code>写成<code>backgroundColor</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&#123;&#123;backgroundColor: &apos;red&apos;&#125;&#125;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure><p><strong>8. 关于 setState</strong></p><p>setState方法用于更新当前组件的state状态值，但调用这个方法后，state并不会立即更新，而是在render方法调用后才会更新</p><h3 id="react-特点"><a href="#react-特点" class="headerlink" title="react 特点"></a>react 特点</h3><ol><li><strong>虚拟DOM</strong>: React是以数据驱动的，每次数据变化React都会扫描整个虚拟DOM树，自动计算与上次虚拟DOM的差异变化，然后针对需要变化的部分进行实际的浏览器DOM更新。</li><li><strong>组件化：</strong> React可以从功能角度划分，将UI分解成不同组件，各组件都独立封装，整个UI是由一个个小组件构成的一个大组件，每个组件只关系自身的逻辑，彼此独立（比如你有个按钮，很多页面都有这个按钮，那么就可以把这个按钮封装成该组件）。</li><li><strong>单项数据流</strong>：React只有单向数据流动-从父节点传递到子节点</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近学了react &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;好处&quot;&gt;&lt;a href=&quot;#好处&quot; class=&quot;headerlink&quot; title=&quot;好处&quot;&gt;&lt;/a&gt;&lt;strong&gt;好处&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自定义标签&lt;/li&gt;
&lt;li&gt;结构清晰&lt;/li&gt;
&lt;li&gt;代码模块化&lt;/li&gt;
&lt;li&gt;更加语义化&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="筆記" scheme="http://yoursite.com/categories/%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>first blog</title>
    <link href="http://yoursite.com/2017/10/11/2017-10-11first-blog/"/>
    <id>http://yoursite.com/2017/10/11/2017-10-11first-blog/</id>
    <published>2017-10-11T07:53:57.000Z</published>
    <updated>2017-10-16T03:02:29.246Z</updated>
    
    <content type="html"><![CDATA[<p>這是我第一次寫博客 哈哈哈</p><a id="more"></a><p>我爱你</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這是我第一次寫博客 哈哈哈&lt;/p&gt;
    
    </summary>
    
      <category term="傻逼" scheme="http://yoursite.com/categories/%E5%82%BB%E9%80%BC/"/>
    
    
      <category term="隨筆" scheme="http://yoursite.com/tags/%E9%9A%A8%E7%AD%86/"/>
    
  </entry>
  
</feed>
